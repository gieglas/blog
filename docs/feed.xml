<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <title>Con&#39;s place</title>
  <subtitle> </subtitle>
  <link href="https://consevangelou.com/feed.xml" rel="self" />
  <link href="https://consevangelou.com/" />
  <updated>2025-03-04T00:00:00Z</updated>
  <id>https://consevangelou.com/</id>
  <author>
    <name>Constantinos Evangelou</name>
  </author>
  <entry>
    <title>govcy-frontend-prototype: A dynamic prototype tool</title>
    <link href="https://consevangelou.com/blog/govcy-frontend-prototype-a-dynamic-prototype-tool/" />
    <updated>2025-03-04T00:00:00Z</updated>
    <id>https://consevangelou.com/blog/govcy-frontend-prototype-a-dynamic-prototype-tool/</id>
    <content type="html">&lt;p&gt;Building high-quality prototypes for government services is often slow and requires coding skills. Designers and researchers need &lt;strong&gt;realistic, interactive prototypes&lt;/strong&gt; for user testing, validating designs, and stakeholder demos, but manually coding them is inefficient. To solve this, I‚Äôve been working on a tool that lets us &lt;strong&gt;build functional prototypes for gov.cy services, using data instead of code&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/gov-cy/govcy-frontend-prototype&quot; target=&quot;_blank&quot;&gt;govcy-frontend-prototype&lt;/a&gt; takes the approach of the &lt;a href=&quot;https://consevangelou.com/blog/building-a-dynamic-html-renderer/&quot;&gt;renderer (discussed in a previous post)&lt;/a&gt; a step further. Instead of just rendering individual UI components, it enables teams to &lt;strong&gt;prototype entire gov.cy services or websites&lt;/strong&gt; using the &lt;a href=&quot;https://gov-cy.github.io/govcy-design-system-docs/&quot; target=&quot;_blank&quot;&gt;Unified Design System&lt;/a&gt; without manually coding HTML.&lt;/p&gt;
&lt;h2&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üí°&lt;/span&gt; Use cases&lt;/h2&gt;
&lt;p&gt;We‚Äôve used it in our team to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Perform user research with high quality HTML prototypes&lt;/li&gt;
&lt;li&gt;Showcase services to stakeholders&lt;/li&gt;
&lt;li&gt;Help the design team understand how the end product will look like&lt;/li&gt;
&lt;li&gt;Help developers to see how HTML elements are rendered through the &lt;a href=&quot;https://gov-cy.github.io/govcy-design-system-docs/getting-started/developer-assets/&quot; target=&quot;_blank&quot;&gt;Unified Design System developed assets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Test new design system components&lt;/li&gt;
&lt;li&gt;Validate compliance with accessibility standards and guidelines early in the design process&lt;/li&gt;
&lt;li&gt;Showcase the use of the &lt;a href=&quot;https://www.npmjs.com/package/@gov-cy/govcy-frontend-renderer&quot; target=&quot;_blank&quot;&gt;govcy-frontend-renderer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It can also be used for a wide range of use cases, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Test and iterate on new service designs before committing to production development&lt;/li&gt;
&lt;li&gt;Demonstrate the functionality and flow of a service for internal training or onboarding&lt;/li&gt;
&lt;li&gt;Quickly create mockups for presentations, workshops, or stakeholder meetings&lt;/li&gt;
&lt;li&gt;Collaborate with cross-functional teams by providing a tangible reference for discussions&lt;/li&gt;
&lt;li&gt;Compare alternative design solutions side-by-side for decision-making&lt;/li&gt;
&lt;li&gt;Test integration of design system components with service-specific content and layouts&lt;/li&gt;
&lt;li&gt;Serve as a lightweight, hostable reference for external contractors or partners working on service-related projects&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Check out some prototype examples &lt;span aria-hidden=&quot;true&quot;&gt;üöÄ&lt;/span&gt; build with this tool:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://gov-cy.github.io/govcy-frontend-prototype/crmd-investigation/?route=all&quot; target=&quot;_blank&quot;&gt;CRMD investigation - Cy login route (in Greek)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gov-cy.github.io/govcy-frontend-prototype/crmd-investigation/?route=unverified&quot; target=&quot;_blank&quot;&gt;CRMD investigation - Unverified route (in Greek)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gov-cy.github.io/govcy-frontend-prototype/crmd-consent/&quot; target=&quot;_blank&quot;&gt;CRMD parental consent (in Greek)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gov-cy.github.io/govcy-frontend-prototype/task-list-demo/&quot; target=&quot;_blank&quot;&gt;Task list demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gov-cy.github.io/govcy-frontend-prototype/crmd-consent/consent-ask/&quot; target=&quot;_blank&quot;&gt;Share component demo (in Greek)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gov-cy.github.io/govcy-frontend-prototype/stg/v2/&quot; target=&quot;_blank&quot;&gt;Single digital platform&lt;/a&gt; (also showcases error handling)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üõ†Ô∏è&lt;/span&gt; How does it work&lt;/h2&gt;
&lt;p&gt;This prototype tool is built using &lt;a href=&quot;https://www.11ty.dev/&quot; target=&quot;_blank&quot;&gt;Eleventy&lt;/a&gt;  as the static site generator and &lt;a href=&quot;https://www.npmjs.com/package/@gov-cy/govcy-frontend-renderer&quot; target=&quot;_blank&quot;&gt;govcy-frontend-renderer&lt;/a&gt; for dynamically rendering UI components. Here‚Äôs why:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Eleventy (11ty)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;11ty is a lightweight and flexible &lt;strong&gt;static site generator&lt;/strong&gt; that allows fast prototyping without requiring a complex backend.&lt;/li&gt;
&lt;li&gt;Supports &lt;strong&gt;Nunjucks&lt;/strong&gt; templates, which makes it easy to structure and reuse design components.&lt;/li&gt;
&lt;li&gt;Generates pure &lt;strong&gt;static HTML&lt;/strong&gt;, which is perfect for hosting on &lt;strong&gt;GitHub Pages&lt;/strong&gt; or any simple web server.&lt;/li&gt;
&lt;li&gt;Fast and efficient, enabling quick iteration on designs without unnecessary build complexity.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;govcy-frontend-renderer&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Dynamically renders UI components based on JSON or Nunjucks templates, eliminating the need to manually write HTML.&lt;/li&gt;
&lt;li&gt;Ensures &lt;strong&gt;design consistency&lt;/strong&gt; by using the &lt;strong&gt;Unified Design System&lt;/strong&gt; components automatically.&lt;/li&gt;
&lt;li&gt;Allows easy &lt;strong&gt;modification and iteration&lt;/strong&gt;‚Äîprototypes can be adjusted just by changing JSON data instead of editing raw HTML.&lt;/li&gt;
&lt;li&gt;Helps developers preview &lt;strong&gt;exactly how components will render&lt;/strong&gt; using the same assets as the production environment.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Together, these tools allow designers, researchers, and developers to &lt;strong&gt;quickly build realistic prototypes&lt;/strong&gt; that are visually accurate, accessible, and easy to modify‚Äîall without writing any custom HTML.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://consevangelou.com/img/Pasted%20image%2020250304132430.png&quot; alt=&quot;How the prototype tool works&quot;&gt;&lt;/p&gt;
&lt;p&gt;The sites‚Äô JSON defines the prototyping sites. To simplify the creation of prototypes, our team uses a custom made Figma plugin to generate the site data in JSON format.&lt;/p&gt;
&lt;p&gt;Here‚Äôs an example JSON template page:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;site&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token property&quot;&gt;&quot;id&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;site1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token property&quot;&gt;&quot;lang&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token property&quot;&gt;&quot;title&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Service title&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;&quot;el&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Œ§ŒπœÑŒªœåœÇ œÖœÄŒ∑œÅŒµœÉŒØŒ±œÇ&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br&gt;      &lt;span class=&quot;token property&quot;&gt;&quot;headerTitle&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Header title&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;&quot;el&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Œ§ŒπœÑŒªœåœÇ ŒµœÄŒπŒ∫ŒµœÜŒ±ŒªŒπŒ¥Œ±œÇ&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token property&quot;&gt;&quot;description&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Service description&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;&quot;el&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Œ†ŒµœÅŒπŒ≥œÅŒ±œÜŒÆ œÖœÄŒ∑œÅŒµœÉŒØŒ±œÇ&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token property&quot;&gt;&quot;url&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://gov.cy&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token property&quot;&gt;&quot;isTesting&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token property&quot;&gt;&quot;cdn&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token property&quot;&gt;&quot;dist&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://cdn.jsdelivr.net/gh/gov-cy/govcy-design-system@3.0.0/dist&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token property&quot;&gt;&quot;cssIntegrity&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;sha384-1zLHWOtnS0hOIz5mVEPZp0UH5gUE6eo0CQcCGA3sF2TyYhHyKOd3Ni8Iy/NjEASU&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token property&quot;&gt;&quot;jsIntegrity&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;sha384-zOuDuogVaaTveh/Ou2iYwCk14zFiSmMk7Ax8yRnXDtOJMyKZH5+ZNibNVwZSKtw+&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token property&quot;&gt;&quot;sections&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;header&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token property&quot;&gt;&quot;elements&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token property&quot;&gt;&quot;element&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;htmlElement&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token property&quot;&gt;&quot;params&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                        &lt;span class=&quot;token property&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                            &lt;span class=&quot;token property&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&amp;lt;h1&gt;Custom header&amp;lt;/h1&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                            &lt;span class=&quot;token property&quot;&gt;&quot;el&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;...&quot;&lt;/span&gt;&lt;br&gt;                        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;pages&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token property&quot;&gt;&quot;pageData&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;              &lt;span class=&quot;token property&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;page1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;              &lt;span class=&quot;token property&quot;&gt;&quot;title&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Home page&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;&quot;el&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Œ†œÅœéœÑŒ∑ œÉŒµŒªŒØŒ¥Œ±&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;              &lt;span class=&quot;token property&quot;&gt;&quot;layout&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;layouts/govcyBase.njk&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br&gt;              &lt;span class=&quot;token property&quot;&gt;&quot;mainLayout&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;max-width&quot;&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token property&quot;&gt;&quot;pageTemplate&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;              &lt;span class=&quot;token property&quot;&gt;&quot;sections&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;                  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                      &lt;span class=&quot;token property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;beforeMain&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                      &lt;span class=&quot;token property&quot;&gt;&quot;elements&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;                        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                            &lt;span class=&quot;token property&quot;&gt;&quot;element&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;backLink&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                            &lt;span class=&quot;token property&quot;&gt;&quot;params&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;                        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;                      &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;                  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                      &lt;span class=&quot;token property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                      &lt;span class=&quot;token property&quot;&gt;&quot;elements&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;                          &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                              &lt;span class=&quot;token property&quot;&gt;&quot;element&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;form&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                              &lt;span class=&quot;token property&quot;&gt;&quot;params&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                                  &lt;span class=&quot;token property&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;DSFPrototypeForm&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                                  &lt;span class=&quot;token property&quot;&gt;&quot;elements&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;                                      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                                          &lt;span class=&quot;token property&quot;&gt;&quot;element&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;textInput&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                                          &lt;span class=&quot;token property&quot;&gt;&quot;params&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                                              &lt;span class=&quot;token property&quot;&gt;&quot;label&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                                                  &lt;span class=&quot;token property&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;What is your name?&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                                                  &lt;span class=&quot;token property&quot;&gt;&quot;el&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Œ†ŒøŒπŒø ŒµŒØŒΩŒ±Œπ œÑŒø ŒøŒΩŒøŒºŒ±œÑŒµœÄœéŒΩœÖŒºŒø œÉŒ±œÇ;&quot;&lt;/span&gt;&lt;br&gt;                                              &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                                              &lt;span class=&quot;token property&quot;&gt;&quot;isPageHeading&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                                              &lt;span class=&quot;token property&quot;&gt;&quot;id&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;inName&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                                              &lt;span class=&quot;token property&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;inName&quot;&lt;/span&gt;&lt;br&gt;                                          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;                                      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                                      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                                          &lt;span class=&quot;token property&quot;&gt;&quot;element&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;button&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                                          &lt;span class=&quot;token property&quot;&gt;&quot;params&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                                              &lt;span class=&quot;token property&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                                                  &lt;span class=&quot;token property&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Continue&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                                                  &lt;span class=&quot;token property&quot;&gt;&quot;el&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Œ£œÖŒΩŒ≠œáŒµŒπŒ±&quot;&lt;/span&gt;&lt;br&gt;                                              &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                                              &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;submit&quot;&lt;/span&gt;&lt;br&gt;                                          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;                                      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;                                  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;                              &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;                          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;                      &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;                  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;              &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token property&quot;&gt;&quot;pageData&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;              &lt;span class=&quot;token property&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;page2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;              &lt;span class=&quot;token property&quot;&gt;&quot;title&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Page 1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;&quot;el&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Œ£ŒµŒªŒπŒ¥Œ± 1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;              &lt;span class=&quot;token property&quot;&gt;&quot;layout&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;layouts/govcyBase.njk&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br&gt;              &lt;span class=&quot;token property&quot;&gt;&quot;mainLayout&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;two-thirds&quot;&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token property&quot;&gt;&quot;pageTemplate&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;              &lt;span class=&quot;token property&quot;&gt;&quot;sections&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;                  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                      &lt;span class=&quot;token property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;beforeMain&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                      &lt;span class=&quot;token property&quot;&gt;&quot;elements&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;                        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                            &lt;span class=&quot;token property&quot;&gt;&quot;element&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;backLink&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                            &lt;span class=&quot;token property&quot;&gt;&quot;params&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;                        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;                      &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;                  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                      &lt;span class=&quot;token property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                      &lt;span class=&quot;token property&quot;&gt;&quot;elements&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;                          &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                              &lt;span class=&quot;token property&quot;&gt;&quot;element&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;form&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                              &lt;span class=&quot;token property&quot;&gt;&quot;params&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                                &lt;span class=&quot;token property&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;DSFPrototypeForm&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                                  &lt;span class=&quot;token property&quot;&gt;&quot;elements&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;                                      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                                          &lt;span class=&quot;token property&quot;&gt;&quot;element&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;textInput&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                                          &lt;span class=&quot;token property&quot;&gt;&quot;params&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                                              &lt;span class=&quot;token property&quot;&gt;&quot;label&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                                                  &lt;span class=&quot;token property&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;What is your email?&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                                                  &lt;span class=&quot;token property&quot;&gt;&quot;el&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Œ†ŒøŒπŒø ŒµŒØŒΩŒ±Œπ œÑŒø email œÉŒ±œÇ;&quot;&lt;/span&gt;&lt;br&gt;                                              &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                                              &lt;span class=&quot;token property&quot;&gt;&quot;isPageHeading&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                                              &lt;span class=&quot;token property&quot;&gt;&quot;id&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;inEmail&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                                              &lt;span class=&quot;token property&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;inEmail&quot;&lt;/span&gt;&lt;br&gt;                                          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;                                      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                                      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                                          &lt;span class=&quot;token property&quot;&gt;&quot;element&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;button&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                                          &lt;span class=&quot;token property&quot;&gt;&quot;params&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                                              &lt;span class=&quot;token property&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                                                  &lt;span class=&quot;token property&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Continue&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                                                  &lt;span class=&quot;token property&quot;&gt;&quot;el&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Œ£œÖŒΩŒ≠œáŒµŒπŒ±&quot;&lt;/span&gt;&lt;br&gt;                                              &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                                              &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;submit&quot;&lt;/span&gt;&lt;br&gt;                                          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;                                      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;                                  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;                              &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;                          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;                      &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;                  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;              &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;routes&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token property&quot;&gt;&quot;all&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token string&quot;&gt;&quot;site1/page1/&quot;&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;site1/page2/&quot;&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;site1/test/&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If there is a need for more complicated pages that are not supported through JSON, the prototype tool has the ability to &lt;a href=&quot;https://github.com/gov-cy/govcy-frontend-prototype?tab=readme-ov-file#combine-json-and-nunjucks-templates&quot; target=&quot;_blank&quot;&gt;combine JSON and Nunjucks templates&lt;/a&gt; within the same service or website prototype.&lt;/p&gt;
&lt;p&gt;More details and instructions on how to use the package are included in the projects &lt;a href=&quot;https://github.com/gov-cy/govcy-frontend-prototype/blob/main/README.md&quot; target=&quot;_blank&quot;&gt;read me&lt;/a&gt; file.&lt;/p&gt;
&lt;h2&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üéØ&lt;/span&gt; Conclusion&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/gov-cy/govcy-frontend-prototype&quot; target=&quot;_blank&quot;&gt;govcy-frontend-prototype&lt;/a&gt; makes prototyping &lt;strong&gt;gov.cy services faster, more accessible, and easier&lt;/strong&gt;. By combining &lt;strong&gt;Eleventy&lt;/strong&gt; and &lt;strong&gt;govcy-frontend-renderer&lt;/strong&gt;, teams can create realistic, interactive prototypes that look and function like real services‚Äîwithout writing HTML.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Managing multi repository products with GitHub projects</title>
    <link href="https://consevangelou.com/blog/managing-multi-repository-product-with-github-projects/" />
    <updated>2025-02-20T00:00:00Z</updated>
    <id>https://consevangelou.com/blog/managing-multi-repository-product-with-github-projects/</id>
    <content type="html">&lt;p&gt;Managing a product spread across multiple repositories can be challenging. Things like keeping track of issues, coordinating updates, and ensuring smooth integration between components require a structured approach. In this post, we‚Äôll explore how we use &lt;a href=&quot;https://docs.github.com/en/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects&quot; target=&quot;_blank&quot;&gt;GitHub Projects&lt;/a&gt; to manage our multi-repository design system effectively.&lt;/p&gt;
&lt;h2&gt;The complexity&lt;/h2&gt;
&lt;p&gt;Let me explain how things get complicated in a multi repository environment, by walking you through the design system project I am working on.&lt;/p&gt;
&lt;p&gt;The design system is structured as a multi-repository product, with each repo serving a distinct product while remaining interconnected. We manage several separate repositories, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Developer Assets&lt;/strong&gt;¬†‚Äì A project that generates the CSS and JavaScript for all foundational styles, components, and design tokens.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentation website&lt;/strong&gt; ‚Äì¬† A project that generates the documentation website with all the information needed to use the Design System&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Renderer&lt;/strong&gt; ‚Äì A separate package for rendering the Design System components‚Äô UI dynamically based on JSON data.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Prototype tool&lt;/strong&gt; ‚Äì¬†A repository of a tool that generates HTML prototypes sites, using the renderer package.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Testing &amp;amp; Validation&lt;/strong&gt; ‚Äì A package with tools and scripts used to ensure websites and services adhere to accessibility and Design System standards.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each repository plays a role in maintaining modularity, allowing teams to work independently while ensuring seamless integration.&lt;/p&gt;
&lt;p&gt;To add to the complexity, there are cases where we use the same versioning for multiple repositories. For example, the &lt;strong&gt;Developer Assets&lt;/strong&gt; and &lt;strong&gt;Documentation Website&lt;/strong&gt; share the same versioning scheme to ensure that changes in one repository are accurately reflected in the other, preventing inconsistencies and outdated information.&lt;/p&gt;
&lt;p&gt;On top of that, we also manage projects outside GitHub, like our Figma Library, adding another layer of complexity to our workflow.&lt;/p&gt;
&lt;p&gt;As you can imagine, managing this product across multiple repositories presents challenges in tracking issues, maintaining consistency, and organizing development efforts. A simple question such as ‚Äúwhat‚Äôs next‚Äù, is difficult to answer without the right tools in place.&lt;/p&gt;
&lt;h2&gt;Why GitHub Projects?&lt;/h2&gt;
&lt;p&gt;GitHub Projects provides a powerful way to centralize issue tracking and streamline workflows, helping teams stay organized and productive. It¬†provides a unified workspace that enhances collaboration across all repositories. Here‚Äôs why it works well for our setup:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Centralized Issue Tracking&lt;/strong&gt; ‚Äì Instead of jumping between repositories, we can manage issues, features, and bug reports in one place.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cross-Repo Visibility&lt;/strong&gt; ‚Äì Developers and designers can see work across all repositories, reducing silos and improving communication.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Product &amp;amp; Version Organization&lt;/strong&gt; ‚Äì We categorize issues by product and version, making it easier to plan and prioritize work.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Automated Workflows&lt;/strong&gt; ‚Äì Integration with GitHub Actions allows automatic updates to project statuses based on issue progress.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Custom Views &amp;amp; Filters&lt;/strong&gt; ‚Äì Tailoring views by repository, version, or work type helps different teams focus on relevant tasks.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Custom Fields&lt;/strong&gt; ‚Äì Adding custom fields enables teams to track specific details like priority, estimated effort, or related milestones, making planning more flexible and informative.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Works with GitHub Issues&lt;/strong&gt; ‚Äì Since GitHub Projects directly integrates with GitHub Issues, it fits naturally into developers‚Äô existing workflows, reducing friction and improving efficiency.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Organizing work with GitHub Projects&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://consevangelou.com/img/github-projects-1.png&quot; alt=&quot;Screenshot of GitHub project, showing the &amp;quot;by product and version&amp;quot; view &quot;&gt;&lt;/p&gt;
&lt;p&gt;Different types of projects can be structured differently depending on their needs, allowing for flexibility in organizing work effectively. To keep our work structured, we have set up GitHub Projects with the following principles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Grouping by Product &amp;amp; Version&lt;/strong&gt; ‚Äì Each feature or update is linked to a specific project and version to ensure clear tracking.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Status Updates &amp;amp; Labels&lt;/strong&gt; ‚Äì Using labels and status updates to indicate backlog, in progress, and completed tasks.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Issue linking &amp;amp; dependencies&lt;/strong&gt; ‚Äì Connecting issues between repositories helps visualize dependencies and potential blockers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additionally, because we use GitHub Issues to record and manage GitHub Project items, we take full advantage of GitHub‚Äôs built-in features, such as linking issues with commits and pull requests. This allows us to track progress seamlessly, see which changes are associated with specific issues, and maintain a clear history of development decisions.&lt;br&gt;
&lt;img src=&quot;https://consevangelou.com/img/github-issues-1.png&quot; alt=&quot;Example of a GitHub issue connected to a project&quot;&gt;&lt;/p&gt;
&lt;p&gt;This setup also provides product managers with an overall high-level view of the product across multiple repositories. They can track overall product health, identify bottlenecks, and ensure that releases stay on schedule. The ability to categorize and filter issues by product and version gives them better control over planning and prioritization, making strategic decisions more informed and data-driven.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://consevangelou.com/img/burnup-example.png&quot; alt=&quot;Example of GitHub projects burnup chart &quot;&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;By leveraging GitHub Projects effectively, you can improve your ability to manage a multi-repository product efficiently, ensuring a smooth development process. The seamless integration with GitHub Issues is particularly beneficial, as it fits naturally into existing developer workflows. With a structured approach and best practices in place, you can keep your projects organized and your teams aligned.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Creating a reliable software release policy</title>
    <link href="https://consevangelou.com/blog/creating-a-reliable-software-release-policy/" />
    <updated>2025-02-09T00:00:00Z</updated>
    <id>https://consevangelou.com/blog/creating-a-reliable-software-release-policy/</id>
    <content type="html">&lt;p&gt;Releasing software updates isn‚Äôt just about numbers and tags‚Äîit‚Äôs a¬†&lt;strong&gt;commitment to quality, reliability, and trust&lt;/strong&gt;. While using adopting &lt;a href=&quot;https://consevangelou.com/blog/why-release-versioning-matters-a-guide-to-semver-and-automated-publishing/&quot;&gt;Semantic Versioning and automation&lt;/a&gt; is a great start, it‚Äôs only part of the story. A truly effective versioning strategy requires a¬†clear release policy, a commitment to maintaining compatibility, and a sense of responsibility to the third parties who rely on your software.&lt;/p&gt;
&lt;p&gt;In this post, we‚Äôll explore the key aspects of a release policy and provide a practical checklist to help ensure it‚Äôs consistently followed.&lt;/p&gt;
&lt;h2&gt;Considerations for a release policy&lt;/h2&gt;
&lt;p&gt;A well-defined release policy should address the following key areas to ensure smooth, reliable, and predictable software updates:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üìã&lt;/span&gt; &lt;strong&gt;Alignment with organizational policies&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Ensure changes comply with relevant organizational policies, such as branding guidelines, GDPR compliance, and accessibility standards.&lt;/li&gt;
&lt;li&gt;Example: If your organization mandates WCAG 2.2 AA compliance, all releases must be tested for and meet these accessibility requirements.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üéØ&lt;/span&gt; &lt;strong&gt;Alignment with project goals and principles&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Changes should support the project‚Äôs core goals and principles.&lt;/li&gt;
&lt;li&gt;Example: If the goal is to accelerate development, new features should simplify workflows and reduce complexity for developers.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî¢&lt;/span&gt; &lt;strong&gt;Adopting Semantic versioning&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Use the Semantic versioning scheme assign version numbers.&lt;/li&gt;
&lt;li&gt;Example: Check out the post on &lt;a href=&quot;https://consevangelou.com/blog/why-release-versioning-matters-a-guide-to-semver-and-automated-publishing/&quot;&gt;Semantic Versioning and automation&lt;/a&gt; .&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üîÑ&lt;/span&gt; &lt;strong&gt;Backward compatibility&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Non-major releases (minor and patch versions) must maintain backward compatibility.&lt;/li&gt;
&lt;li&gt;Example: Avoid introducing breaking changes in patch updates; reserve them for major releases with clear migration paths.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üîó&lt;/span&gt; &lt;strong&gt;Feature interaction and integration&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Consider how new features or changes interact with existing ones.&lt;/li&gt;
&lt;li&gt;Example: In a Design System, a new Hint component should be tested alongside related components (e.g., Text Inputs) to ensure seamless integration.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üîÑ&lt;/span&gt; &lt;strong&gt;Consistency across releases&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Maintain consistency in how features are implemented and used.&lt;/li&gt;
&lt;li&gt;Example: If text content is defined as¬†&lt;code&gt;{&amp;quot;en&amp;quot;:&amp;quot;Some text&amp;quot;,&amp;quot;el&amp;quot;:&amp;quot;Œ†ŒµœÅŒπŒµœáœåŒºŒµŒΩŒø&amp;quot;}&lt;/code&gt;¬†in existing features, new features should follow the same pattern.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üß™&lt;/span&gt; &lt;strong&gt;Regression testing&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Test every release against existing functionality to catch regressions early.&lt;/li&gt;
&lt;li&gt;Example: Use automated regression tests to ensure new changes don‚Äôt break existing features.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üîß&lt;/span&gt; &lt;strong&gt;Update related products or tools&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Ensure that all related products or tools are updated as needed.&lt;/li&gt;
&lt;li&gt;Example: A change in the Design System may require updates to its rendering tool or usage documentation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üìö&lt;/span&gt; &lt;strong&gt;Documentation and communication&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Provide detailed changelogs, release notes, and upgrade guides for every release.&lt;/li&gt;
&lt;li&gt;Example: Clearly document breaking changes in major releases and provide migration steps for developers.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üìÖ&lt;/span&gt; &lt;strong&gt;Release frequency and scheduling&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Define a predictable release schedule to manage expectations.&lt;/li&gt;
&lt;li&gt;Example: Commit to monthly patch releases and quarterly minor releases, with major releases planned once every year.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;ü§ù&lt;/span&gt; &lt;strong&gt;Stakeholder involvement&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Involve relevant stakeholders (e.g., product managers, developers, QA teams) in the release process.&lt;/li&gt;
&lt;li&gt;Example: Conduct a release review meeting to ensure all teams are aligned before deployment.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üö®&lt;/span&gt; &lt;strong&gt;Rollback and emergency fixes&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Plan for rollback procedures and emergency fixes in case of critical issues.&lt;/li&gt;
&lt;li&gt;Example: Maintain a hotfix branch for urgent patches and ensure rollback mechanisms are tested.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üì£&lt;/span&gt; &lt;strong&gt;User feedback and impact assessment&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Gather feedback from the users to assess the impact of changes.&lt;/li&gt;
&lt;li&gt;Example: Use surveys, feedback forms and metrics to understand how updates affect third-party integrations.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üîí&lt;/span&gt; &lt;strong&gt;Security and compliance&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Ensure releases meet security and compliance requirements.&lt;/li&gt;
&lt;li&gt;Example: Conduct security audits for major releases and ensure compliance with industry standards like ISO 27001.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;ü§ñ&lt;/span&gt; &lt;strong&gt;Automation and tooling&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Leverage automation tools (e.g., GitHub Actions, CI/CD pipelines) to streamline the release process.&lt;/li&gt;
&lt;li&gt;Example: Automate &lt;a href=&quot;https://consevangelou.com/blog/why-release-versioning-matters-a-guide-to-semver-and-automated-publishing/&quot;&gt;version tagging&lt;/a&gt;, testing, and publishing to reduce manual errors.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üéì&lt;/span&gt; &lt;strong&gt;Training and support&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Provide training and support for external developers or teams adapting to new changes.&lt;/li&gt;
&lt;li&gt;Example: Host webinars or create tutorials to explain new features or migration steps.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Release checklist&lt;/h2&gt;
&lt;p&gt;Having a checklist helps to ensure that every update follows a structured process. Instead of walking you through a long policy document, I‚Äôm sharing a practical checklist that I use to ensure the release policy for our Design System is followed. I‚Äôve made some adjustments to make it more generic, but it still reflects the key considerations of a Design System project. If you plan to use it, don‚Äôt just copy and paste‚Äîadapt it to fit the specifics of your own project.&lt;/p&gt;
&lt;h3&gt;1. &lt;span aria-hidden=&quot;true&quot;&gt;üîç&lt;/span&gt; Discover&lt;/h3&gt;
&lt;p&gt;Identify the purpose and impact of the proposed change to ensure alignment with project goals and policies.&lt;/p&gt;
&lt;ul class=&quot;list-unstyled&quot;&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; &lt;strong&gt;Purpose&lt;/strong&gt; - Clearly articulate the &lt;strong&gt;reason for the change&lt;/strong&gt;.
&lt;ul&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; Identify the &lt;strong&gt;problem or opportunity&lt;/strong&gt; the change addresses.&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; Make sure the &lt;em&gt;Purpose&lt;/em&gt; address the &lt;strong&gt;project goals&lt;/strong&gt; and the &lt;strong&gt;users‚Äô needs&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; Ensure the proposed change promotes the &lt;strong&gt;organizational policies&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; Ensure the proposed change aligns with the &lt;strong&gt;core principles&lt;/strong&gt; of the project.&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; Evaluate the &lt;strong&gt;accessibility impact&lt;/strong&gt; of the change and &lt;strong&gt;compliance&lt;/strong&gt; with standards.&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; &lt;strong&gt;Other Elements&lt;/strong&gt; - Identify and document any existing elements or features that will be affected by the change.
&lt;ul&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; Assess the impact on existing elements&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; &lt;strong&gt;Design System alignment&lt;/strong&gt; - Review the proposed change against the Design System.
&lt;ul&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; Ensure &lt;strong&gt;consistency&lt;/strong&gt; and &lt;strong&gt;coherence&lt;/strong&gt; with the overall design language&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;2. &lt;span aria-hidden=&quot;true&quot;&gt;üßê&lt;/span&gt; Evaluate&lt;/h3&gt;
&lt;p&gt;Assess the proposed change to determine its impact and how it should be released. This phase is crucial as it defines the release type based on Semantic Versioning, ensuring updates are categorized correctly and released appropriately.&lt;/p&gt;
&lt;ul class=&quot;list-unstyled&quot;&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; &lt;strong&gt;Evaluate&lt;/strong&gt; the proposed change and decide:
&lt;ol&gt;
&lt;li&gt;Implement as a &lt;strong&gt;Minor Update&lt;/strong&gt;: This kind of change is backward compatible and will not require developers to change their code if the decide to upgrade. This could be a bug, backward compatible improvement, or a new component.¬†The change can be implemented as soon as possible and can¬†be incorporated into a &lt;code&gt;minor&lt;/code&gt; or &lt;code&gt;patch&lt;/code&gt; version update.&lt;/li&gt;
&lt;li&gt;Implement within &lt;strong&gt;Next Major&lt;/strong&gt; update: This kind of change would require third-party developers to change their code in order to upgrade.¬†The change will be scheduled for the next major version and will be grouped together with other Major changes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Further Research Needed&lt;/strong&gt;: Additional research or prototyping and testing is required before a final decision.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Revise and Resubmit&lt;/strong&gt;: The proposal needs revisions and must be resubmitted for evaluation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pilot Implementation&lt;/strong&gt;: Implement the change on a trial basis to gather more data before full implementation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Do Not Implement&lt;/strong&gt;: The change will not be implemented. This could be a change that does not agree with the goals and principles of the project.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;3. &lt;span aria-hidden=&quot;true&quot;&gt;‚úç&lt;/span&gt; Define&lt;/h3&gt;
&lt;p&gt;Create detailed designs and documentation to ensure all aspects of the change are well-planned.&lt;/p&gt;
&lt;ul class=&quot;list-unstyled&quot;&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; Create &lt;strong&gt;visual designs&lt;/strong&gt; for the proposed change (e.g. in Figma).
&lt;ul&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; Include changes needed in other &lt;strong&gt;affected components&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; Define and design &lt;strong&gt;all variants&lt;/strong&gt; of the component or pattern.
&lt;ul&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; Ensure each variant meets the &lt;strong&gt;design principles&lt;/strong&gt; and &lt;strong&gt;accessibility standards&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; While designing make sure to follow the &lt;strong&gt;technical&lt;/strong&gt; and &lt;strong&gt;design principles&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; Ensure designs meets the &lt;strong&gt;security&lt;/strong&gt; and &lt;strong&gt;accessibility standards&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; Document any &lt;strong&gt;additional requirements&lt;/strong&gt;, such as performance or usability considerations.&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; Design and review &lt;strong&gt;any content associated&lt;/strong&gt; with the change. Ensure clarity, readability, and accessibility.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;4. &lt;span aria-hidden=&quot;true&quot;&gt;üõ†Ô∏è&lt;/span&gt; Prototype&lt;/h3&gt;
&lt;p&gt;Develop a working prototype to test and validate the proposed change before full-scale development.&lt;/p&gt;
&lt;ul class=&quot;list-unstyled&quot;&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; Develop a &lt;strong&gt;working prototype&lt;/strong&gt; of the proposed change.&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; Ensure it accurately &lt;strong&gt;reflects the design and functionality&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; Develop &lt;strong&gt;all variants&lt;/strong&gt;, and if applicable, all &lt;strong&gt;other existing elements that are affected&lt;/strong&gt; by the change.&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; Develop &lt;strong&gt;use specific test pages&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Test, User Research&lt;/h4&gt;
&lt;ul class=&quot;list-unstyled&quot;&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; Conduct initial tests to &lt;strong&gt;validate the prototype against it‚Äôs purpose&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; Ensure it &lt;strong&gt;functions as expected&lt;/strong&gt; and &lt;strong&gt;meets all requirements&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; Conduct &lt;strong&gt;user research&lt;/strong&gt; to gather feedback on the prototype.&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; Use insights to &lt;strong&gt;refine&lt;/strong&gt; and &lt;strong&gt;improve&lt;/strong&gt; the design.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;5. &lt;span aria-hidden=&quot;true&quot;&gt;üíª&lt;/span&gt; Develop&lt;/h3&gt;
&lt;p&gt;Code the changes and ensuring quality and consistency.&lt;/p&gt;
&lt;ul class=&quot;list-unstyled&quot;&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; &lt;strong&gt;Develop&lt;/strong&gt; changes.&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; &lt;strong&gt;Code review&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; Ensure coding &lt;strong&gt;consistency&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; Ensure it adheres to &lt;strong&gt;coding standards&lt;/strong&gt; and &lt;strong&gt;best practices&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; Ensure it follows the &lt;strong&gt;technical&lt;/strong&gt; and &lt;strong&gt;design principles&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; Conduct and pass &lt;strong&gt;regression tests&lt;/strong&gt; (e.g. visual regression tests with Percy).&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; Update the &lt;strong&gt;changelog&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; Update version in &lt;strong&gt;package.json&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Accessibility test&lt;/h4&gt;
&lt;ul class=&quot;list-unstyled&quot;&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; &lt;strong&gt;Visual inspection&lt;/strong&gt; ‚Äì Check display consistency and mouse interaction.&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; &lt;strong&gt;Automatic accessibility testing&lt;/strong&gt; ‚Äì Run tests with automated tools like PA11Y.&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; &lt;strong&gt;Keyboard navigation&lt;/strong&gt; ‚Äì Test navigation using arrow keys, Tab, Enter, Space, etc.&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; &lt;strong&gt;Screen readers compatibility&lt;/strong&gt; ‚Äì Test with supported screen readers like NVDA (Windows) and VoiceOver (MacOS).&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; &lt;strong&gt;Magnification &amp;amp; Zoom&lt;/strong&gt; ‚Äì Verify with browser zoom, pinch-to-zoom (mobile), and magnifiers (e.g. Windows magnifier).&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; &lt;strong&gt;User Testing&lt;/strong&gt; ‚Äì Conduct tests with real users, including those with disabilities.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Browsers testing&lt;/h4&gt;
&lt;ul class=&quot;list-unstyled&quot;&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; iOS Safari&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; MacOS Safari&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; Windows Chrome&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; Windows Edge&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; Windows Firefox&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; Android Chrome&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; Android Samsung browser&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;6. &lt;span aria-hidden=&quot;true&quot;&gt;üöÄ&lt;/span&gt; Deploy&lt;/h3&gt;
&lt;p&gt;Release the new version smoothly, updating all necessary documentation and tools.&lt;/p&gt;
&lt;h4&gt;Code&lt;/h4&gt;
&lt;ul class=&quot;list-unstyled&quot;&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; Deploy New Version (&lt;strong&gt;Merge to Main&lt;/strong&gt;).&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; Ensure all &lt;strong&gt;GitHub workflows (actions) are completed successfully&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; Ensure all &lt;strong&gt;developer assets are updated&lt;/strong&gt; accordingly.&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; Ensure a &lt;strong&gt;version change has been made&lt;/strong&gt; (check GitHub tags, releases and npm).&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; Ensure the library has been &lt;strong&gt;released on all required platforms&lt;/strong&gt; (e.g., npm, GitHub Releases, etc).&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Documentation&lt;/h4&gt;
&lt;ul class=&quot;list-unstyled&quot;&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; &lt;strong&gt;Update Documentation&lt;/strong&gt; website.
&lt;ul&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; Make sure to include &lt;strong&gt;coded examples&lt;/strong&gt; of &lt;strong&gt;all variants&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; Make sure all &lt;strong&gt;affected existing elements&lt;/strong&gt; are also updated.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; &lt;strong&gt;New elements or features&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; Use the same &lt;strong&gt;documentation template&lt;/strong&gt; and &lt;strong&gt;style&lt;/strong&gt; of documentation.&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; &lt;strong&gt;reference the new elements&lt;/strong&gt; wherever is appropriate.&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt;  document the &lt;strong&gt;accessibility&lt;/strong&gt;, &lt;strong&gt;error messages&lt;/strong&gt; and &lt;strong&gt;content&lt;/strong&gt; sections of the new element.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; &lt;strong&gt;Update the version reference&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; in all &lt;strong&gt;sample pages&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; in &lt;strong&gt;developer assets page&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; in &lt;strong&gt;template page&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; in &lt;strong&gt;version number&lt;/strong&gt; shown on every page.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; Update the &lt;strong&gt;What‚Äôs new&lt;/strong&gt; section&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Supporting tools&lt;/h4&gt;
&lt;ul class=&quot;list-unstyled&quot;&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; &lt;strong&gt;Update the design library&lt;/strong&gt; (e.g. Figma) to include the new elements.&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; Update other supporting tools if needed (e.g. renderer library, tester, etc.).&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; Update the &lt;strong&gt;reference to the product version&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;span aria-hidden=&quot;true&quot;&gt;üî≤&lt;/span&gt; Deploy.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;A well-defined release policy ensures every update is intentional, reliable, and aligned with your project‚Äôs goals. Whether you‚Äôre maintaining a Design System or a complex software product, having a structured approach to releases improves consistency, reduces regressions, and builds trust with your users.&lt;/p&gt;
&lt;p&gt;A good release policy not only benefits the users but also the team, making releases smooth and predictable. Use the checklist as a starting point and adapt it to your needs to make your releases easier, and as always, try to automate as much as you can.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Why release versioning matters: A Guide to SemVer and automated publishing</title>
    <link href="https://consevangelou.com/blog/why-release-versioning-matters-a-guide-to-semver-and-automated-publishing/" />
    <updated>2025-02-03T00:00:00Z</updated>
    <id>https://consevangelou.com/blog/why-release-versioning-matters-a-guide-to-semver-and-automated-publishing/</id>
    <content type="html">&lt;p&gt;In the world of software development, versioning is more than just a technical detail, it‚Äôs a critical practice that ensures reliability, compatibility, and trust. Whether you‚Äôre building libraries, frameworks, or tools for third-party use, a well-defined versioning policy is essential for maintaining a healthy ecosystem. In this post, we‚Äôll explore why versioning matters, how Semantic Versioning (SemVer) works and how to implement an automated versioning workflow for products intended to be used by¬†external teams and developers.&lt;/p&gt;
&lt;p&gt;When talking about ‚Äúversioning‚Äù in this post, I am not referring to Git or version control systems. Instead, I‚Äôm focusing on¬†&lt;strong&gt;release versioning&lt;/strong&gt;‚Äîthe practice of assigning version numbers (like¬†&lt;code&gt;1.0.0&lt;/code&gt;¬†or¬†&lt;code&gt;2.1.3&lt;/code&gt;) to software releases to communicate changes effectively.&lt;/p&gt;
&lt;h2&gt;Why versioning matters to your users&lt;/h2&gt;
&lt;p&gt;Versioning is the backbone of software maintenance and distribution. It provides a clear and structured way to communicate changes, updates, and improvements to users. Here‚Äôs why having a versioning crucial:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Predictability&lt;/strong&gt;: Users can anticipate the impact of updates based on version numbers. For example:
&lt;ul&gt;
&lt;li&gt;A¬†&lt;strong&gt;major version&lt;/strong&gt;¬†change (e.g.,¬†&lt;code&gt;1.0.0&lt;/code&gt;¬†to¬†&lt;code&gt;2.0.0&lt;/code&gt;) signals breaking changes.&lt;/li&gt;
&lt;li&gt;A¬†&lt;strong&gt;minor version&lt;/strong&gt;¬†change (e.g.,¬†&lt;code&gt;1.0.0&lt;/code&gt;¬†to¬†&lt;code&gt;1.1.0&lt;/code&gt;) indicates new, backward-compatible features.&lt;/li&gt;
&lt;li&gt;A¬†&lt;strong&gt;patch version&lt;/strong&gt;¬†change (e.g.,¬†&lt;code&gt;1.0.0&lt;/code&gt;¬†to¬†&lt;code&gt;1.0.1&lt;/code&gt;) means bug fixes without breaking existing functionality.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Compatibility&lt;/strong&gt;: A clear versioning policy ensures that users can safely update dependencies without unexpected issues. It helps maintain backward compatibility and reduces the risk of breaking changes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Transparency&lt;/strong&gt;: Versioning provides a documented history of changes, making it easier for users to understand what‚Äôs new, what‚Äôs fixed, and what‚Äôs changed in each release.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Trust&lt;/strong&gt;: A consistent versioning policy builds confidence among users, demonstrating a commitment to maintaining and improving the software in a structured and predictable manner.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Semantic versioning (SemVer)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://semver.org/&quot; target=&quot;_blank&quot;&gt;Semantic Versioning&lt;/a&gt;, or SemVer, is a widely adopted versioning scheme that uses a three-part version number:¬†&lt;code&gt;MAJOR.MINOR.PATCH&lt;/code&gt;. Here‚Äôs how it works:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;MAJOR&lt;/strong&gt;: Incremented for incompatible API changes. Change here indicates to users that they will need to make changes to their code in order to use this version safely.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MINOR&lt;/strong&gt;: Incremented for backward-compatible new features. Changes here without changing the Major number, indicates to users they can safely update to this version.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PATCH&lt;/strong&gt;: Incremented for backward-compatible bug fixes. Changes here without changing the Major number, also indicates to users they can safely update to this version.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By adhering to SemVer, developers can communicate the nature of changes clearly, making it easier for other developers or teams to decide when and how to update.&lt;/p&gt;
&lt;h3&gt;SemVer with Git tags&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://consevangelou.com/img/Pasted%20image%2020250125185218.png&quot; alt=&quot;GitHub tags&quot;&gt;&lt;br&gt;
At the heart of most versioning strategies is the use of¬†&lt;strong&gt;Git tags&lt;/strong&gt;. Git tags are references to specific commits in your Git history. Unlike branches, which move as new commits are added, tags are immutable‚Äîthey always point to the same commit. This makes them ideal for marking release points, such as¬†&lt;code&gt;v1.0.0&lt;/code&gt;¬†or¬†&lt;code&gt;v2.1.3&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Why use git tags for versioning?&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Immutable releases&lt;/strong&gt;: Once a tag is created, it permanently points to a specific commit. This ensures that a version (e.g.,¬†&lt;code&gt;v1.0.0&lt;/code&gt;) always refers to the exact same code, providing consistency and reliability.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Clear history&lt;/strong&gt;: Tags make it easy to see when releases were made and what changes were included in each version.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Automation-friendly&lt;/strong&gt;: Git tags integrate seamlessly with tools like GitHub, GitLab and CI/CD platforms (e.g., GitHub Actions, CircleCI), enabling automated workflows for versioning, testing, and publishing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SemVer compatibility&lt;/strong&gt;: By naming tags according to Semantic Versioning (e.g.,¬†&lt;code&gt;v1.0.0&lt;/code&gt;), you can clearly communicate the nature of each release (major, minor, or patch).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Industry standard&lt;/strong&gt;: Many open-source projects and organizations use Git tags to manage releases. For example, projects like Kubernetes, React, and Vue.js rely on Git tags for versioning.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Traceability&lt;/strong&gt;: Tags provide a clear and traceable history of releases.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tooling integration&lt;/strong&gt;: Tools like npm and CDNs (e.g., jsDelivr) recognize Git tags as version identifiers. For example, when you publish a package to npm, it uses Git tags to map versions like¬†&lt;code&gt;v1.0.0&lt;/code&gt;¬†to specific releases.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We‚Äôll explore how to implement a versioning workflow and automate the creation of Git tags later on this post.&lt;/p&gt;
&lt;h2&gt;SemVer from the user‚Äôs perspective&lt;/h2&gt;
&lt;p&gt;The structured approach of SemVer ensures clarity which allows third-party developers to update dependencies with confidence, knowing that patch and minor updates won‚Äôt break their applications.&lt;/p&gt;
&lt;p&gt;SemVer also simplifies dependency management. Developers can use version ranges like¬†&lt;code&gt;^1.2.3&lt;/code&gt;¬†(for minor and patch updates) or¬†&lt;code&gt;~1.2.3&lt;/code&gt;¬†(for patch updates only) in their¬†&lt;code&gt;package.json&lt;/code&gt;¬†to control how updates are applied (more on that later on).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://consevangelou.com/img/Pasted%20image%2020250128105320.png&quot; alt=&quot;Example of how users can use a library with SemVer&quot;&gt;&lt;/p&gt;
&lt;p&gt;This flexibility, combined with detailed changelogs, fosters trust and reliability. By following SemVer, library maintainers demonstrate a commitment to stability and transparency, making it easier for teams to adopt and maintain their libraries over time.&lt;/p&gt;
&lt;p&gt;Let‚Äôs look at some examples of how third parties can use SemVer to load your libraries.&lt;/p&gt;
&lt;h3&gt;1. npm Packages&lt;/h3&gt;
&lt;p&gt;npm (Node Package Manager) uses SemVer to manage package versions and developers can specify how these packages get updated in their¬†&lt;code&gt;package.json&lt;/code&gt;. Here‚Äôs an example for updating only non major releases:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Add the library&lt;/strong&gt;: The library consumer adds the library to their &lt;code&gt;package.json&lt;/code&gt; dependencies section with a caret (&lt;code&gt;^&lt;/code&gt;), which indicates npm to allow minor and patch updates:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;your-library&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;^1.2.3&quot;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;strong&gt;Install dependencies&lt;/strong&gt;: The developer installs the library&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;&lt;strong&gt;Receive updates&lt;/strong&gt;: When there is a release of a new version (e.g.,¬†&lt;code&gt;1.2.4&lt;/code&gt;¬†or¬†&lt;code&gt;1.3.0&lt;/code&gt;), the developer can update their dependencies.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; update&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;If the new version is¬†&lt;code&gt;1.2.4&lt;/code&gt;¬†(patch), it will be applied automatically.&lt;/li&gt;
&lt;li&gt;If the new version is¬†&lt;code&gt;1.3.0&lt;/code&gt;¬†(minor), it will also be applied.&lt;/li&gt;
&lt;li&gt;If the new version is¬†&lt;code&gt;2.0.0&lt;/code&gt;¬†(major), it will¬†&lt;strong&gt;not&lt;/strong&gt;¬†be applied, as the¬†&lt;code&gt;^&lt;/code&gt;¬†prefix restricts updates to the¬†&lt;code&gt;1.x.x&lt;/code&gt;¬†range.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;2. CDN providers (e.g., jsDelivr)&lt;/h3&gt;
&lt;p&gt;CDNs like &lt;a href=&quot;https://www.jsdelivr.com/&quot; target=&quot;_blank&quot;&gt;jsDelivr&lt;/a&gt; use SemVer to serve library versions. They also provide aliases for major versions, ensuring users always get the latest compatible version. Here are some examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Major Version Alias&lt;/strong&gt;:&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://cdn.jsdelivr.net/npm/some-library@3&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
Will always load the¬†latest version within the specified major version. Example:¬†&lt;code&gt;@3&lt;/code&gt;¬†will load the latest¬†&lt;code&gt;3.x.x&lt;/code&gt;¬†version.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Specific Version&lt;/strong&gt;:&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://cdn.jsdelivr.net/npm/some-library@3.2.1&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
Will always load the¬†exact version specified. Example:¬†&lt;code&gt;@3.2.1&lt;/code&gt;¬†will load only version¬†&lt;code&gt;3.2.1&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Deployment workflow&lt;/h2&gt;
&lt;p&gt;Following a structured workflow can ensure that every release is predictable, well-tested, and thoroughly documented. Let‚Äôs see an example workflow for an npm library.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Update Version Number&lt;/strong&gt;&lt;br&gt;
Increment the version in your &lt;code&gt;package.json&lt;/code&gt; file based on the nature of the changes  (major, minor, or patch)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Update Changelog&lt;/strong&gt;&lt;br&gt;
Record all changes in the &lt;code&gt;CHANGELOG.md&lt;/code&gt; file to keep a detailed history of updates, including bug fixes, new features, and deprecations.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Build the Project&lt;/strong&gt;&lt;br&gt;
Rebuild the project using your build script (&lt;code&gt;npm run build&lt;/code&gt;) to ensure the latest changes are compiled and ready for release.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Run Tests&lt;/strong&gt;&lt;br&gt;
Run automated tests (&lt;code&gt;npm test&lt;/code&gt;) to ensure the integrity of the code and prevent regressions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Manual Testing&lt;/strong&gt;&lt;br&gt;
Test the updates locally (&lt;code&gt;npm start&lt;/code&gt;) to verify functionality and ensure no issues were missed by automated tests.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Update Documentation&lt;/strong&gt;&lt;br&gt;
Update relevant documentation to reflect any new features, changes, or guidance on upgrading to a new major version.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tag and Publish&lt;/strong&gt;&lt;br&gt;
Use tools like GitHub Actions to automate testing, tagging the release (e.g., &lt;code&gt;v1.2.3&lt;/code&gt;) and publishing it to the appropriate package registry.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Communicate&lt;/strong&gt;&lt;br&gt;
Notify your team, users, or stakeholders about the release, highlighting key changes and any required actions.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Automated workflow for tag and publish&lt;/h3&gt;
&lt;p&gt;Automating tag creation and publishing ensures consistency, reduces manual errors, and saves time for library maintainers, while providing users with reliable and clearly versioned releases.&lt;/p&gt;
&lt;p&gt;Here‚Äôs an example GitHub Actions workflow that automates versioning and publishing:&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Tag and Publish on Version Change&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token key atrule&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; main&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;**&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token key atrule&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;tag-and-publish-on-version-change&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Tag and publish on version change&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ubuntu&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;latest&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/checkout@v2&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; EndBug/version&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;check@v2.1.5&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token key atrule&quot;&gt;static-checking&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; localIsNew&lt;br&gt;          &lt;span class=&quot;token key atrule&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;br&gt;          &lt;span class=&quot;token key atrule&quot;&gt;file-url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; https&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;//raw.githubusercontent.com/your&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;org/your&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;repo&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;name/latest/package.json&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; version&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;check&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Check version not decreased&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; steps.version&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;check.outputs.changed == &#39;true&#39; &lt;span class=&quot;token important&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; steps.version&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;check.outputs.type == &#39;undefined&#39;&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; echo &quot;You should NEVER decrement/ decrease the version in the package.json. This will undermine confidence in our ability to follow semver rules&quot;; exit 1&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Check package.lock&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;version updated if ./dist changed&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; steps.version&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;check.outputs.changed == &#39;false&#39;&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; echo &quot;Version remained the same. Exiting&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&quot;; &lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Create &#39;vX.X.X&#39; version git tag&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; steps.version&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;check.outputs.changed == &#39;true&#39;&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/github&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;script@v5&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token key atrule&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token scalar string&quot;&gt;&lt;br&gt;            github.rest.git.createRef({&lt;br&gt;              owner: context.repo.owner,&lt;br&gt;              repo: context.repo.repo,&lt;br&gt;              ref: &#39;refs/tags/v&#39; + &#39;$NaN&#39;,&lt;br&gt;              sha: context.sha&lt;br&gt;            })&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; dev&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;drprasad/delete&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;tag&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;and&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;release@v0.2.1&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; steps.version&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;check.outputs.changed == &#39;true&#39;&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token key atrule&quot;&gt;tag_name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; latest&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token key atrule&quot;&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Create &#39;latest&#39; git tag&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; steps.version&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;check.outputs.changed == &#39;true&#39;&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/github&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;script@v5&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token key atrule&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token scalar string&quot;&gt;&lt;br&gt;            github.rest.git.createRef({&lt;br&gt;              owner: context.repo.owner,&lt;br&gt;              repo: context.repo.repo,&lt;br&gt;              ref: &#39;refs/tags/latest&#39;,&lt;br&gt;              sha: context.sha&lt;br&gt;            })&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Extract Major Version&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; steps.version&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;check.outputs.changed == &#39;true&#39;&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; major&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;version&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; echo &quot;major=$(echo &#39;$NaN&#39; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt; cut &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;d. &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;f1)&quot; &lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt; $GITHUB_ENV&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Create &#39;vX.x.x&#39; version git tag&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; steps.version&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;check.outputs.changed == &#39;true&#39;&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/github&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;script@v5&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token key atrule&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token scalar string&quot;&gt;&lt;br&gt;            const majorVersion = process.env.major || &quot;0&quot;; // Default to &quot;0&quot; if not set&lt;br&gt;            console.log(`Extracted Major Version: ${majorVersion}`); // Debugging output&lt;br&gt;            const tagName = `v${majorVersion}.x.x`;&lt;br&gt;            console.log(`Tag to create: ${tagName}`); // Debugging output&lt;/span&gt;&lt;br&gt;            &lt;br&gt;            const tagExists = await github.rest.git.getRef(&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token key atrule&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; context.repo.owner&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token key atrule&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; context.repo.repo&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token key atrule&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; `tags/$&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;tagName&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;`&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;).catch(() =&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt; null);&lt;br&gt;&lt;br&gt;            if (tagExists) &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                await github.rest.git.deleteRef(&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token key atrule&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; context.repo.owner&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token key atrule&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; context.repo.repo&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token key atrule&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; `tags/$&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;tagName&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;`&lt;br&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;);&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;            await github.rest.git.createRef(&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token key atrule&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; context.repo.owner&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token key atrule&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; context.repo.repo&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token key atrule&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; `refs/tags/$&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;tagName&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;`&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token key atrule&quot;&gt;sha&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; context.sha&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;);&lt;br&gt;      &lt;span class=&quot;token comment&quot;&gt;# Publish on npm&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Setup Node&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/setup&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;node@v2&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token key atrule&quot;&gt;node-version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;18.x&#39;&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token key atrule&quot;&gt;registry-url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;https://registry.npmjs.org&#39;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Install dependencies &lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; npm install&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Publish package on NPM üì¶&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; npm publish &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;access=public&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token key atrule&quot;&gt;NODE_AUTH_TOKEN&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let‚Äôs break it down step by step to explain what each part does:&lt;/p&gt;
&lt;h4&gt;Workflow Overview&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Trigger&lt;/strong&gt;: The workflow runs on a¬†&lt;code&gt;push&lt;/code&gt;¬†to the¬†&lt;code&gt;main&lt;/code&gt;¬†branch, but only if changes are detected in any file (&lt;code&gt;paths: &#39;**&#39;&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Purpose&lt;/strong&gt;: It checks if the version in¬†&lt;code&gt;package.json&lt;/code&gt;¬†has changed, creates Git tags for the new version, and publishes the package to npm.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Step-by-Step Explanation&lt;/h4&gt;
&lt;h5&gt;1. Checkout the repository&lt;/h5&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/checkout@v2&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;This step checks out the repository code so that the workflow can access the files (e.g.,¬†&lt;code&gt;package.json&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;2. Check for version changes&lt;/h5&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; EndBug/version&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;check@v2.1.5&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;static-checking&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; localIsNew&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;file-url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; https&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;//raw.githubusercontent.com/your&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;org/your&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;repo&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;name/latest/package.json&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; version&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;check&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Action&lt;/strong&gt;:¬†&lt;code&gt;EndBug/version-check&lt;/code&gt;¬†compares the local¬†&lt;code&gt;package.json&lt;/code&gt;¬†version with the version in the specified¬†&lt;code&gt;file-url&lt;/code&gt;¬†(in this case, the¬†&lt;code&gt;latest&lt;/code&gt;¬†branch of the repository).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Purpose&lt;/strong&gt;: Determines if the version has changed and outputs:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;changed&lt;/code&gt;:¬†&lt;code&gt;true&lt;/code&gt;¬†if the version has changed,¬†&lt;code&gt;false&lt;/code&gt;¬†otherwise.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;version&lt;/code&gt;: The new version from¬†&lt;code&gt;package.json&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;type&lt;/code&gt;: The type of version change (&lt;code&gt;major&lt;/code&gt;,¬†&lt;code&gt;minor&lt;/code&gt;,¬†&lt;code&gt;patch&lt;/code&gt;, or¬†&lt;code&gt;undefined&lt;/code&gt;¬†if the version decreased).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;3. Ensure version does not decrease&lt;/h5&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Check version not decreased&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; steps.version&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;check.outputs.changed == &#39;true&#39; &lt;span class=&quot;token important&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; steps.version&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;check.outputs.type == &#39;undefined&#39;&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; echo &quot;You should NEVER decrement/ decrease the version in the package.json. This will undermine confidence in our ability to follow semver rules&quot;; exit 1&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Condition&lt;/strong&gt;: Runs only if the version has changed (&lt;code&gt;changed == &#39;true&#39;&lt;/code&gt;) and the change type is¬†&lt;code&gt;undefined&lt;/code&gt;¬†(indicating a version decrease).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Action&lt;/strong&gt;: Exits the workflow with an error message if the version has decreased, enforcing Semantic Versioning (SemVer) rules.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;4. Skip workflow if version unchanged&lt;/h5&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Check package.lock&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;version updated if ./dist changed&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; steps.version&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;check.outputs.changed == &#39;false&#39;&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; echo &quot;Version remained the same. Exiting&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&quot;; &lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Condition&lt;/strong&gt;: Runs if the version has not changed (&lt;code&gt;changed == &#39;false&#39;&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Action&lt;/strong&gt;: Logs a message and exits the workflow early since no action is needed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;5. Create a git tag for the new version&lt;/h5&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Create &#39;vX.X.X&#39; version git tag&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; steps.version&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;check.outputs.changed == &#39;true&#39;&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/github&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;script@v5&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token scalar string&quot;&gt;&lt;br&gt;      github.rest.git.createRef({&lt;br&gt;        owner: context.repo.owner,&lt;br&gt;        repo: context.repo.repo,&lt;br&gt;        ref: &#39;refs/tags/v&#39; + &#39;$NaN&#39;,&lt;br&gt;        sha: context.sha&lt;br&gt;      })&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Condition&lt;/strong&gt;: Runs if the version has changed (&lt;code&gt;changed == &#39;true&#39;&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Action&lt;/strong&gt;: Creates a Git tag for the new version (e.g.,¬†&lt;code&gt;v1.2.3&lt;/code&gt;) using the¬†&lt;code&gt;github-script&lt;/code&gt;¬†action.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;6. Delete the¬†&lt;code&gt;latest&lt;/code&gt;¬†Tag (if it exists)&lt;/h5&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; dev&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;drprasad/delete&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;tag&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;and&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;release@v0.2.1&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; steps.version&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;check.outputs.changed == &#39;true&#39;&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;tag_name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; latest&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Condition&lt;/strong&gt;: Runs if the version has changed (&lt;code&gt;changed == &#39;true&#39;&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Action&lt;/strong&gt;: Deletes the existing¬†&lt;code&gt;latest&lt;/code&gt;¬†Git tag to prepare for creating a new one.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;7. Create a New¬†&lt;code&gt;latest&lt;/code&gt;¬†Git Tag&lt;/h5&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Create &#39;latest&#39; git tag&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; steps.version&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;check.outputs.changed == &#39;true&#39;&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/github&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;script@v5&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token scalar string&quot;&gt;&lt;br&gt;      github.rest.git.createRef({&lt;br&gt;        owner: context.repo.owner,&lt;br&gt;        repo: context.repo.repo,&lt;br&gt;        ref: &#39;refs/tags/latest&#39;,&lt;br&gt;        sha: context.sha&lt;br&gt;      })&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Condition&lt;/strong&gt;: Runs if the version has changed (&lt;code&gt;changed == &#39;true&#39;&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Action&lt;/strong&gt;: Creates a new¬†&lt;code&gt;latest&lt;/code&gt;¬†Git tag pointing to the latest commit.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;8. Extract the Major Version&lt;/h5&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Extract Major Version&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; steps.version&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;check.outputs.changed == &#39;true&#39;&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; major&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;version&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; echo &quot;major=$(echo &#39;$NaN&#39; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt; cut &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;d. &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;f1)&quot; &lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt; $GITHUB_ENV&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Condition&lt;/strong&gt;: Runs if the version has changed (&lt;code&gt;changed == &#39;true&#39;&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Action&lt;/strong&gt;: Extracts the major version number (e.g.,¬†&lt;code&gt;1&lt;/code&gt;¬†from¬†&lt;code&gt;1.2.3&lt;/code&gt;) and stores it in the¬†&lt;code&gt;major&lt;/code&gt;¬†environment variable.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;9. Create a Major Version Tag (e.g.,¬†&lt;code&gt;v1.x.x&lt;/code&gt;)&lt;/h5&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Create &#39;vX.x.x&#39; version git tag&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; steps.version&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;check.outputs.changed == &#39;true&#39;&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/github&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;script@v5&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token scalar string&quot;&gt;&lt;br&gt;      const majorVersion = process.env.major || &quot;0&quot;; // Default to &quot;0&quot; if not set&lt;br&gt;      console.log(`Extracted Major Version: ${majorVersion}`); // Debugging output&lt;br&gt;      const tagName = `v${majorVersion}.x.x`;&lt;br&gt;      console.log(`Tag to create: ${tagName}`); // Debugging output&lt;/span&gt;&lt;br&gt;      &lt;br&gt;      const tagExists = await github.rest.git.getRef(&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token key atrule&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; context.repo.owner&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token key atrule&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; context.repo.repo&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token key atrule&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; `tags/$&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;tagName&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;`&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;).catch(() =&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt; null);&lt;br&gt;&lt;br&gt;      if (tagExists) &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;          await github.rest.git.deleteRef(&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token key atrule&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; context.repo.owner&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token key atrule&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; context.repo.repo&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token key atrule&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; `tags/$&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;tagName&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;`&lt;br&gt;          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;);&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;      await github.rest.git.createRef(&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token key atrule&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; context.repo.owner&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token key atrule&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; context.repo.repo&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token key atrule&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; `refs/tags/$&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;tagName&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;`&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token key atrule&quot;&gt;sha&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; context.sha&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Condition&lt;/strong&gt;: Runs if the version has changed (&lt;code&gt;changed == &#39;true&#39;&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Action&lt;/strong&gt;: Creates a major version tag (e.g.,¬†&lt;code&gt;v1.x.x&lt;/code&gt;) for the new version. If the tag already exists, it is deleted and recreated.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;10. Publish the Package to npm&lt;/h5&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# Publish on npm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Setup Node&lt;br&gt;&lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/setup&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;node@v2&lt;br&gt;&lt;span class=&quot;token key atrule&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;node-version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;18.x&#39;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;registry-url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;https://registry.npmjs.org&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Install dependencies &lt;br&gt;&lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; npm install&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Publish package on NPM üì¶&lt;br&gt;&lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; npm publish &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;access=public&lt;br&gt;&lt;span class=&quot;token key atrule&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;NODE_AUTH_TOKEN&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Action&lt;/strong&gt;: Sets up Node.js, installs dependencies using¬†&lt;code&gt;npm install&lt;/code&gt; and publishes the package to npm with public access. The¬†&lt;code&gt;NODE_AUTH_TOKEN&lt;/code&gt;¬†environment variable is used for authentication.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This workflow ensures that every version change is automatically tagged and published, reducing manual effort and minimizing errors.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;A well-defined versioning policy is essential for any project used by third parties. By adopting Semantic Versioning and automating your versioning workflow, you can provide clarity, reliability, and trust to your users. Whether you‚Äôre managing npm packages or serving libraries via CDNs, versioning ensures that your software remains compatible and predictable. Investing in a structured release process not only improves adopters efficiency, but also contributes to a more stable and sustainable software ecosystem.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Building a Dynamic HTML Renderer with Nunjucks and JSON Templates</title>
    <link href="https://consevangelou.com/blog/building-a-dynamic-html-renderer/" />
    <updated>2025-01-24T00:00:00Z</updated>
    <id>https://consevangelou.com/blog/building-a-dynamic-html-renderer/</id>
    <content type="html">&lt;p&gt;I‚Äôve been working on a dynamic HTML renderer (&lt;a href=&quot;https://github.com/gov-cy/govcy-frontend-renderer&quot; target=&quot;_blank&quot;&gt;gocvy-frontend-renderer&lt;/a&gt;) and I thought it might be interesting to explain how it works.&lt;/p&gt;
&lt;h2&gt;Project Overview&lt;/h2&gt;
&lt;p&gt;The gocvy-frontend-renderer project is structured to support the rendering of HTML elements based on the &lt;a href=&quot;https://gov-cy.github.io/govcy-design-system-docs/&quot; target=&quot;_blank&quot;&gt;gov.cy Unified Design System (UDS)&lt;/a&gt;. The goal is to enable the creation of gov.cy UI components using either structured data (JSON), or a powerful template engine (&lt;a href=&quot;https://mozilla.github.io/nunjucks/&quot; target=&quot;_blank&quot;&gt;Nunjucks&lt;/a&gt; ), without requiring any HTML knowledge. This approach offers significant flexibility and ease of use, making the transition from data to UI seamless. It has a wide range of applications, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rapidly creating prototypes using static site generators (check out this &lt;a href=&quot;https://gov-cy.github.io/govcy-frontend-prototype/task-list-demo/&quot; target=&quot;_blank&quot;&gt;prototype example&lt;/a&gt; ).&lt;/li&gt;
&lt;li&gt;Rendering the UI in applications (check out this &lt;a href=&quot;https://gov-cy.github.io/dsf-assessment-checklist/&quot; target=&quot;_blank&quot;&gt;SPA application example&lt;/a&gt; ).&lt;/li&gt;
&lt;li&gt;Rendering the UI in low code products.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By leveraging JSON and Nunjucks, this project simplifies the process of building consistent and reusable UI components that adhere to the UDS guidelines.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://consevangelou.com/img/Pasted%20image%2020250124082931.png&quot; alt=&quot;using the govcy-frontend-renderer project&quot;&gt;&lt;/p&gt;
&lt;p&gt;Here is an example of how the package can be used:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; govcyFrontendRenderer &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;@gov-cy/govcy-frontend-renderer&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; renderer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;govcyFrontendRenderer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// Define the input data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; inputData &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;    &lt;br&gt;    &lt;span class=&quot;token string-property property&quot;&gt;&quot;site&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token string-property property&quot;&gt;&quot;lang&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token string-property property&quot;&gt;&quot;title&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Service title&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;el&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Œ§ŒπœÑŒªœåœÇ œÖœÄŒ∑œÅŒµœÉŒØŒ±œÇ&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br&gt;        &lt;span class=&quot;token string-property property&quot;&gt;&quot;headerTitle&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Header title&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;el&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Œ§ŒπœÑŒªœåœÇ ŒµœÄŒπŒ∫ŒµœÜŒ±ŒªŒπŒ¥Œ±œÇ&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token string-property property&quot;&gt;&quot;description&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Service description&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;el&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Œ†ŒµœÅŒπŒ≥œÅŒ±œÜŒÆ œÖœÄŒ∑œÅŒµœÉŒØŒ±œÇ&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token string-property property&quot;&gt;&quot;url&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://gov.cy&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token string-property property&quot;&gt;&quot;cdn&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token string-property property&quot;&gt;&quot;dist&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://cdn.jsdelivr.net/gh/gov-cy/govcy-design-system@3.0.0/dist&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token string-property property&quot;&gt;&quot;cssIntegrity&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;sha384-1zLHWOtnS0hOIz5mVEPZp0UH5gUE6eo0CQcCGA3sF2TyYhHyKOd3Ni8Iy/NjEASU&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token string-property property&quot;&gt;&quot;jsIntegrity&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;sha384-zOuDuogVaaTveh/Ou2iYwCk14zFiSmMk7Ax8yRnXDtOJMyKZH5+ZNibNVwZSKtw+&quot;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token string-property property&quot;&gt;&quot;pageData&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token string-property property&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Page title&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;el&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Œ§ŒπœÑŒªœåœÇ œÉŒµŒªŒπŒ¥Œ±œÇ&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token string-property property&quot;&gt;&quot;layout&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;layouts/govcyBase.njk&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token string-property property&quot;&gt;&quot;mainLayout&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;max-width&quot;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// Define the JSON template &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; inputJson &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;  &lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token string-property property&quot;&gt;&quot;sections&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token string-property property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token string-property property&quot;&gt;&quot;elements&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token string-property property&quot;&gt;&quot;element&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;form&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token string-property property&quot;&gt;&quot;params&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                        &lt;span class=&quot;token string-property property&quot;&gt;&quot;elements&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;                            &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                                &lt;span class=&quot;token string-property property&quot;&gt;&quot;element&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;textInput&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                                &lt;span class=&quot;token string-property property&quot;&gt;&quot;params&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;br&gt;                                &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                                    &lt;span class=&quot;token string-property property&quot;&gt;&quot;label&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;What is your name?&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;el&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Œ†ŒøŒπŒø ŒµŒØŒΩŒ±Œπ œÑŒø œåŒΩŒøŒºŒ± œÉŒ±œÇ;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;                                    &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;br&gt;                                    &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;br&gt;                                    &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;isPageHeading&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;br&gt;                                    &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;autocomplete&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;tel&quot;&lt;/span&gt;&lt;br&gt;                                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;                            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                            &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                                &lt;span class=&quot;token string-property property&quot;&gt;&quot;element&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;button&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                                &lt;span class=&quot;token string-property property&quot;&gt;&quot;params&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;br&gt;                                &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                                    &lt;span class=&quot;token string-property property&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Continue&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;el&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Œ£œÖŒΩŒ≠œáŒµŒπŒ±&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;                                    &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;submit&quot;&lt;/span&gt;&lt;br&gt;                                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;                            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;                        &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// Render&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; rtn &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; renderer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;renderFromJSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;inputJson&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; inputData&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rtn&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More details and instructions on how to use the package are included in the projects &lt;a href=&quot;https://github.com/gov-cy/govcy-frontend-prototype/blob/main/README.md&quot; target=&quot;_blank&quot;&gt;read me file&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Rendering HTML&lt;/h2&gt;
&lt;p&gt;The project uses Nunjucks, a powerful templating engine, to process templates and generate HTML.  Every call to render, goes through the¬†&lt;code&gt;govcyFrontendRenderer&lt;/code&gt;¬†JS class, which supports two types of input templates: Nunjucks and JSON templates.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;govcyFrontendRenderer&lt;/code&gt; uses the &lt;code&gt;govcyElement&lt;/code&gt; Nunjucks macro, which is the core of the rendering system. It is responsible for rendering individual design elements. The macro imports the necessary Nunjucks templates for each element and calls the appropriate macro to render the element. It uses the &lt;code&gt;component&lt;/code&gt; argument to decide which macro to import and use, and the &lt;code&gt;params&lt;/code&gt; argument for the element‚Äôs parameters.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://consevangelou.com/img/Pasted%20image%2020250124115652.png&quot; alt=&quot;Rendering HTML with govcy-frontend-renderer&quot;&gt;&lt;/p&gt;
&lt;p&gt;Here‚Äôs a usage example of &lt;code&gt;govcyElement&lt;/code&gt; macro&lt;/p&gt;
&lt;pre class=&quot;language-twig&quot;&gt;&lt;code class=&quot;language-twig&quot;&gt;&lt;br&gt;&lt;span class=&quot;token twig language-twig&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{{&lt;/span&gt; &lt;br&gt;    govcyElement&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token string&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;button&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            text&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;en&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Continue&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;el&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Œ£œÖŒΩŒ≠œáŒµŒπŒ±&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br&gt;            variant&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;success&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br&gt;            id&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;success-button&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;br&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Reusability and consistency&lt;/h3&gt;
&lt;p&gt;The project is designed to ensure reusability and consistency. Regardless of whether the input template is, JSON or Nunjucks, the resulting HTML is rendered using the same Nunjucks macros, guaranteeing consistent output.&lt;/p&gt;
&lt;p&gt;It also reuses common elements across different components, such as labels, hints, and error messages.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://consevangelou.com/img/Pasted%20image%2020250124122416.png&quot; alt=&quot;How elements such as labels are reused by different components&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Adding more elements&lt;/h2&gt;
&lt;p&gt;The project is build to be flexible and easily extensible, allowing the team add more elements over time.&lt;/p&gt;
&lt;p&gt;The process for adding more elements is very simple.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;1. Element‚Äôs nunjucks macro file&lt;/strong&gt;. Create an &lt;code&gt;njk&lt;/code&gt; file for the macro in the directory &lt;code&gt;src&#92;njk&#92;elements&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2. govcyElement.njk&lt;/strong&gt;. Update the &lt;code&gt;src&#92;njk&#92;govcyElement.njk&lt;/code&gt; file macro with the new component, by adding the macro name in the &lt;code&gt;macroBlocks&lt;/code&gt; array.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Before going live, all changes are of course tested.&lt;/p&gt;
&lt;h3&gt;Testing&lt;/h3&gt;
&lt;p&gt;Testing is particularly important, as we wanted to build trust and encourage usage. Every element‚Äôs rendered HTML is verified against the definitions in the Unified Design System.&lt;/p&gt;
&lt;p&gt;For every element supported by the project, the following process is followed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;1. test.njk&lt;/strong&gt;. The &lt;code&gt;test&#92;test.njk&lt;/code&gt; file is updated, rendering all variants of the element with &lt;code&gt;govcyElement&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2. test.json&lt;/strong&gt;. The &lt;code&gt;test&#92;test.json&lt;/code&gt; file is update with the same variants of  the element as in &lt;code&gt;test&#92;test.njk&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;3. Manuall test&lt;/strong&gt;. Changes are manually tested on local host by running &lt;code&gt;npm start&lt;/code&gt; against the definitions in the Unified Design System&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;4. Unit test script&lt;/strong&gt;. The &lt;code&gt;test&#92;moca&#92;unit.test.mjs&lt;/code&gt; file is updated with tests for all the element‚Äôs variants.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;5. Run unit tests&lt;/strong&gt;. Unit tests are run by &lt;code&gt;npm run test&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Versioning&lt;/h3&gt;
&lt;p&gt;Having a versioning policy is crucial, especially for projects intended to be used by third parties. In this project, the Semantic Versioning (SemVer) is followed to manage versions using the three-part version number: &lt;code&gt;MAJOR.MINOR.PATCH&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Before releasing a new version the following process is followed:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Update Version Number&lt;/strong&gt;: the version number in &lt;code&gt;package.json&lt;/code&gt; is updated according to the changes made.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Update Changelog&lt;/strong&gt;: The &lt;code&gt;CHANGELOG.md&lt;/code&gt; file is updated to document the changes included in the new version.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Local tests&lt;/strong&gt;: All changes are tested locally.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pull request tests&lt;/strong&gt;: Unit tests are run using GitHub Actions on every pull request.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tag and Publish&lt;/strong&gt;: Tagging and publishing the new version on npm is done using GitHub Actions on every merge to the Main branch.&lt;/li&gt;
&lt;/ol&gt;
</content>
  </entry>
  <entry>
    <title>Enhancing the Unified Design System with automated visual testing (by DSF)</title>
    <link href="https://consevangelou.com/blog/dsf-enhancing-the-unified-design-system-with-automated-visual-testing/" />
    <updated>2025-01-08T00:00:00Z</updated>
    <id>https://consevangelou.com/blog/dsf-enhancing-the-unified-design-system-with-automated-visual-testing/</id>
    <content type="html">&lt;p&gt;Check out the link below for the post I wrote for the &lt;a href=&quot;https://dsf.dmrid.gov.cy/&quot; target=&quot;_blank&quot;&gt;Digital Services Factory (DSF)&lt;/a&gt;, on how DSF uses Percy to perform automatic visual regression testing, to improve the quality of the Unified Design System and provide a more reliable user experience.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://dsf.dmrid.gov.cy/2025/01/08/enhancing-the-unified-design-system-with-automated-visual-testing/&quot; class=&quot;govcy-btn-primary&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://consevangelou.com/img/dsf-small-white-icon.svg&quot; alt=&quot;DSF&quot; class=&quot;btn-image&quot;&gt; Launch the post&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Automating accessibility: Site-wide testing and reporting guide</title>
    <link href="https://consevangelou.com/blog/automating-accessibility-site-wide-testing-and-reporting-guide/" />
    <updated>2024-12-23T00:00:00Z</updated>
    <id>https://consevangelou.com/blog/automating-accessibility-site-wide-testing-and-reporting-guide/</id>
    <content type="html">&lt;p&gt;I‚Äôve created a script to automate accessibility checks across my site, save the results in JSON, and display them on my &lt;a href=&quot;https://consevangelou.com/accessibility/&quot;&gt;accessibility page&lt;/a&gt;. While it may sound daunting, it actually wasn‚Äôt that hard to do, so I thought it might be interesting to share how I did it.&lt;/p&gt;
&lt;p&gt;Before diving in, it‚Äôs important to note that automated testing provides valuable insights and suggestions for best practices, but it is not enough and it should not replace manual accessibility testing. Manual testing is crucial to ensure comprehensive accessibility compliance.&lt;/p&gt;
&lt;h2&gt;Dependencies&lt;/h2&gt;
&lt;p&gt;I use &lt;a href=&quot;https://www.11ty.dev/&quot; target=&quot;_blank&quot;&gt;Eleventy&lt;/a&gt; to build my site, which is a Node.js based static site generator, so it made sense to use &lt;a href=&quot;https://nodejs.org/&quot; target=&quot;_blank&quot;&gt;Node.js&lt;/a&gt; and NPM for my test script.&lt;/p&gt;
&lt;p&gt;My weapon of choice for accessibility testing is &lt;a href=&quot;https://github.com/pa11y/pa11y&quot; target=&quot;_blank&quot;&gt;Pa11y&lt;/a&gt; which I use frequently to automate my tests. Here‚Äôs why I like Pa11y so much:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pa11y supports multiple accessibility standards, including WCAG 2.1, and is highly customizable allowing you to set the standard to test against.&lt;/li&gt;
&lt;li&gt;It offers a simple command-line interface, making it easy to integrate into various workflows, including CI/CD pipelines.&lt;/li&gt;
&lt;li&gt;It provides detailed reports of accessibility issues, including the type of issue, the element causing the issue, and suggestions for fixing it.&lt;/li&gt;
&lt;li&gt;Pa11y can be easily integrated with other tools and frameworks, such as Eleventy, to automate the testing process and generate reports.&lt;/li&gt;
&lt;li&gt;It has an active community, and it‚Äôs package health score is high on &lt;a href=&quot;https://snyk.io/advisor/npm-package/pa11y&quot; target=&quot;_blank&quot;&gt;snyk Advisor&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So first things first, I needed to install Pa11y with this command&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; pa11y&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;The script&lt;/h2&gt;
&lt;p&gt;The script is very simple really, it just goes through an array of pages, runs pa11y to do the tests, and save‚Äôs the results in a JSON file.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Eleventy &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;@11ty/eleventy&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; pa11y &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;pa11y&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; writeFile &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;fs/promises&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; elev &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Eleventy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// retrieve Eleventy content&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; pagesJson &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; elev&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toJSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// filter only pages ending with `/`. &lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; filteredPagesJson &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; pagesJson&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; item&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;endsWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// define the server URL. Note this means the test is run on localhost&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; serverURL &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;http://localhost:8080&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;## Run tests&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// run tests&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;testAccessibilityAndSave&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;filteredPagesJson&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; serverURL&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;testAccessibilityAndSave&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;pages&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;serverURL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; resultsArray &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; failed &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Track failures&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// for each page&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; page &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; pages&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;page&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;outputPath&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;endsWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;.html&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Testing &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;page&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;url&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token comment&quot;&gt;// run pa11y&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; results &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;pa11y&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;serverURL &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; page&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token literal-property property&quot;&gt;standard&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;WCAG2AA&#39;&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token comment&quot;&gt;// push results in an array&lt;/span&gt;&lt;br&gt;                resultsArray&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; page&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;issues&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; results&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;issues &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token comment&quot;&gt;// if there are accessibility issues write on the console&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;results&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;issues&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Accessibility issues found in &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;page&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;url&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;results&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;issues&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                    failed &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Mark as failed if any issues are found&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Error testing &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;page&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;url&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; error&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                failed &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Mark as failed if an error occurs&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token comment&quot;&gt;// add date and results to the json&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; resultsJSON &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token literal-property property&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toISOString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;T&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token literal-property property&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; resultsArray&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token comment&quot;&gt;// write to file on special `_data` folder so Eleventy can convert it into a collection&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;writeFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;src/_data/accessibilityresults.json&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;resultsJSON&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Results saved to `src/_data/accessibilityresults.json`&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fileError&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Error saving results:&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fileError&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        failed &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Mark as failed if an error occurs&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Exit with code 1 if any tests failed, otherwise exit with code 0&lt;/span&gt;&lt;br&gt;    process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;failed &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I‚Äôve added comments to clarify each step, but here‚Äôs a quick summary for better understanding.&lt;/p&gt;
&lt;h3&gt;Imports&lt;/h3&gt;
&lt;p&gt;I import &lt;code&gt;pa11y&lt;/code&gt; to run the tests and &lt;code&gt;writeFile&lt;/code&gt; to write the results in a file. I also import &lt;code&gt;Eleventy&lt;/code&gt; so that I can get the pages Eleventy has built. If you don‚Äôt use Eleventy you will not need this.&lt;/p&gt;
&lt;h3&gt;Get the pages to test&lt;/h3&gt;
&lt;p&gt;Again I use Eleventy so I get the pages using it‚Äôs API as follows:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt; &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; elev &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Eleventy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// retrieve Eleventy content&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; pagesJson &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; elev&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toJSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// filter only pages ending with `/`. &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; filteredPagesJson &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; pagesJson&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; item&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;endsWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You will notice that I filter the results to items with URL that ends with &lt;code&gt;/&lt;/code&gt;. This is because I also build other files such as &lt;code&gt;sitemap.xml&lt;/code&gt; or &lt;code&gt;feed.xml&lt;/code&gt; which I want to exclude from my tests.&lt;/p&gt;
&lt;p&gt;If you do not use Eleventy you probably need to provide the URLs yourself.&lt;/p&gt;
&lt;h3&gt;Perform the test&lt;/h3&gt;
&lt;p&gt;All the magic is done with in this line&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; results &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;pa11y&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;serverURL &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; page&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token literal-property property&quot;&gt;standard&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;WCAG2AA&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The script passes the URL and the standard to test with, which in our case is WCAG2AA.&lt;/p&gt;
&lt;p&gt;If any issues are found on a given URL, they will be returned in an array in &lt;code&gt;results.issues&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;All the results are pushed into the &lt;code&gt;resultsArray&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Save results in JSON&lt;/h3&gt;
&lt;p&gt;Before the results are saved, the script adds the date it run in this code segment:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// add date and results to the json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; resultsJSON &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token literal-property property&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toISOString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;T&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token literal-property property&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; resultsArray&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It then writes the results in &lt;code&gt;src/_data/accessibilityresults.json&lt;/code&gt;. You can really save them wherever you like. I opted to use the folder &lt;code&gt;_data&lt;/code&gt;, because Eleventy treats this sort of like a magic folder, and everything inside it gets built into a collection which I can use in my pages.&lt;/p&gt;
&lt;h2&gt;Running the script&lt;/h2&gt;
&lt;p&gt;Pa11y needs to be able to access the pages to test them, so if you run your tests on the &lt;code&gt;localhost&lt;/code&gt; as I do, make sure the local server is up and running before you use the script.&lt;/p&gt;
&lt;p&gt;All you need to do to run the script is this:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;node&lt;/span&gt; a11y.mjs&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Using it in a CI/CD pipeline&lt;/h2&gt;
&lt;p&gt;I use my script in my development workflow, but it can easily be include in a CI/CD pipeline. The script indicates success or failure with the code segment below, so it should be CI/CD ready:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;failed &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I haven‚Äôt tried it my self, but you could create a GitHub Action by creating a file under &lt;code&gt;.github/workflows/accessibility-test.yml&lt;/code&gt; like this (note: I got this script with the help of AI, I did not test it my self, so it might need some changes, or updates):&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Accessibility Test&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token key atrule&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; main&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;pull_request&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token key atrule&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;accessibility&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ubuntu&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;latest&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token comment&quot;&gt;# Checkout the code&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Checkout Code&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/checkout@v3&lt;br&gt;&lt;br&gt;      &lt;span class=&quot;token comment&quot;&gt;# Set up Node.js&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Setup Node.js&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/setup&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;node@v3&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token key atrule&quot;&gt;node-version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;br&gt;      &lt;span class=&quot;token comment&quot;&gt;# Install dependencies&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Install Dependencies&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; npm ci&lt;br&gt;&lt;br&gt;      &lt;span class=&quot;token comment&quot;&gt;# Build the site&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Build Site&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; npx @11ty/eleventy&lt;br&gt;&lt;br&gt;      &lt;span class=&quot;token comment&quot;&gt;# Start a server for the static site&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Start Static Server&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token scalar string&quot;&gt;&lt;br&gt;          npx http-server _site -p 8080 &amp;amp;&lt;br&gt;          echo $! &gt; server.pid&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token key atrule&quot;&gt;CI&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;true&lt;/span&gt;&lt;br&gt;&lt;br&gt;      &lt;span class=&quot;token comment&quot;&gt;# Run Accessibility Test&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Run Accessibility Test&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; node a11y.mjs&lt;br&gt;&lt;br&gt;      &lt;span class=&quot;token comment&quot;&gt;# Save Results as Artifact&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Upload Accessibility Results&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; always()&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/upload&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;artifact@v3&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; accessibility&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;results&lt;br&gt;          &lt;span class=&quot;token key atrule&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; src/_data/accessibilityresults.json&lt;br&gt;&lt;br&gt;      &lt;span class=&quot;token comment&quot;&gt;# Stop the server&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Stop Static Server&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; always()&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; kill $(cat server.pid)&lt;br&gt;        &lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Using the results files in Eleventy&lt;/h2&gt;
&lt;p&gt;This section is specifically for those who use Eleventy, but the underlying principles can be adapted for other implementations as well.&lt;/p&gt;
&lt;h3&gt;Show the report in a page&lt;/h3&gt;
&lt;p&gt;As I mentioned before, Eleventy treats the &lt;code&gt;_data&lt;/code&gt; folder like a magic folder and automatically turns all &lt;code&gt;json&lt;/code&gt; files into collections. This makes my life very easy. All I need to do to show the results in a page, is to use one of the Eleventy supported template engines and loop through the &lt;code&gt;accessibilityresults&lt;/code&gt; collection.&lt;/p&gt;
&lt;p&gt;I like using &lt;a href=&quot;https://mozilla.github.io/nunjucks/&quot; target=&quot;_blank&quot;&gt;Nunjucks&lt;/a&gt; so in my &lt;code&gt;accessibility.njk&lt;/code&gt; file I use the following code segment to display the report:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h2&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;report&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Report&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;This report was created on &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;time&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;{{ accessibilityresults.date }}&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;{{ accessibilityresults.date | dateOnly }}&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;time&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; based on an automated test performed with &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://pa11y.org/&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;_blank&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;pa11y&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;table&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;thead&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;tr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;th&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;col&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Page&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;th&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;th&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;col&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Score&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;th&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;th&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;col&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Issues&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;th&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;tr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;thead&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;tbody&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    {% for result in accessibilityresults.results %}&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;tr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;td&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;{{ result.url }}&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;{{ result.url }}&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;td&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;td&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;{% if result.issues.length &gt; 0 %}&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;fail-tag&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Fail&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;{% else %}&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;success-tag&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Pass&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;{% endif %}&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;td&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;td&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;             &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ol&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;                {% for issue in result.issues %}&lt;br&gt;                &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;{{ issue.message }}&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;                {% endfor %}&lt;br&gt;            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ol&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;td&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;tr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    {% endfor %}&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;tbody&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;table&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Oh, I forgot to mention, I‚Äôve also created the following CSS classes for the pass and fail tags:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.fail-tag&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;margin-left&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; .35rem&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;margin-bottom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 5px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 5px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 14px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 3px 12px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; inline-block&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;vertical-align&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; top&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; fit-content&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; -moz-fit-content&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #D4351C&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #ffffff&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;text-decoration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; none&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token selector&quot;&gt;.success-tag&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;margin-left&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; .35rem&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;margin-bottom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 5px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 5px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 14px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 3px 12px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; inline-block&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;vertical-align&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; top&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; fit-content&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; -moz-fit-content&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #00703C&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #ffffff&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;text-decoration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; none&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Bonus: show a success or fail badge&lt;/h3&gt;
&lt;p&gt;I also show a success or fail badge of my test on every page. To do that, I added a global data in my &lt;code&gt;.eleventy.js&lt;/code&gt; file with this code segment:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;  eleventyConfig&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addGlobalData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;accessibilityStatus&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;readFileSync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;src/_data/accessibilityresults.json&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; allNoIssues &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;results&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;every&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; page&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;issues&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;date&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;results&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;allNoIssues&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; allNoIssues&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I then use the &lt;code&gt;accessibilityStatus&lt;/code&gt; in my njk template like this:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;{{ &#39;/accessibility/#report&#39; }}&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;general-a11y-badge&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;	{% if accessibilityStatus.allNoIssues %}        &lt;br&gt;			&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://a11ybadges.com/badge?logo=smile&lt;span class=&quot;token entity named-entity&quot; title=&quot;&amp;amp;&quot;&gt;&amp;amp;amp;&lt;/span&gt;text=a11y_passed&lt;span class=&quot;token entity named-entity&quot; title=&quot;&amp;amp;&quot;&gt;&amp;amp;amp;&lt;/span&gt;badgeColor=green&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;{{ site.localization[locale].a11y_success}}&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;	{% else %}&lt;br&gt;			&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://a11ybadges.com/badge?logo=frown&lt;span class=&quot;token entity named-entity&quot; title=&quot;&amp;amp;&quot;&gt;&amp;amp;amp;&lt;/span&gt;text=a11y_failed&lt;span class=&quot;token entity named-entity&quot; title=&quot;&amp;amp;&quot;&gt;&amp;amp;amp;&lt;/span&gt;badgeColor=red&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;{{ site.localization[locale].a11y_fail}}&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;	{% endif %}&lt;br&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt; &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I use &lt;a href=&quot;https://github.com/a11y-badges/a11y-badges&quot; target=&quot;_blank&quot;&gt;a11y-badges&lt;/a&gt; to create the badges, which is a more accessible version of &lt;a href=&quot;https://shields.io/&quot; target=&quot;_blank&quot;&gt;shields.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here are the css classes I use for the badges:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.general-a11y-badge img&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; auto &lt;span class=&quot;token important&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 24px &lt;span class=&quot;token important&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So there you have it! I hope this post can help you implement your own automated accessibility check process.&lt;/p&gt;
&lt;p&gt;Automating accessibility checks can save you a lot of time and help you maintain a more accessible website. However, remember that automated tests are not a substitute for manual testing. Use them as a tool to catch common issues and guide your manual testing efforts.&lt;/p&gt;
&lt;p&gt;Happy testing!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>gov.cy Design System update (V.3.0.0) ‚Äì Unified Design System</title>
    <link href="https://consevangelou.com/blog/dsf-design-system-update-v-3-0-0-unified-design-system/" />
    <updated>2024-08-07T00:00:00Z</updated>
    <id>https://consevangelou.com/blog/dsf-design-system-update-v-3-0-0-unified-design-system/</id>
    <content type="html">&lt;p&gt;The &lt;a href=&quot;https://dsf.dmrid.gov.cy/&quot; target=&quot;_blank&quot;&gt;Digital Services Factory (DSF)&lt;/a&gt;, released of version 3.0.0 of the gov.cy design system. This is a total redesign of the design system, with branding and styling changes, updated and new components, to accommodate both services and websites.&lt;/p&gt;
&lt;p&gt;The new version includes improvements on existing components, as well as new design elements to accommodate services and websites alike.&lt;/p&gt;
&lt;p&gt;Drawing from the DSF‚Äôs experience developing gov.cy services, user research findings, and the feedback they received from other teams that used the design system, they incorporated lessons learned, to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;define the gov.cy design principles&lt;/li&gt;
&lt;li&gt;align design elements with these principles&lt;/li&gt;
&lt;li&gt;better explain the design system‚Äôs best practices&lt;/li&gt;
&lt;li&gt;accelerate the design and development of services&lt;/li&gt;
&lt;li&gt;make it easier for¬†service teams to understand and implement the design system&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Changes include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the introduction of the‚ÄØ&lt;a href=&quot;https://gov-cy.github.io/govcy-design-system-docs/getting-started/principles/&quot; target=&quot;_blank&quot;&gt;design system principles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;an updated &lt;a href=&quot;https://gov-cy.github.io/govcy-design-system-docs/getting-started/&quot; target=&quot;_blank&quot;&gt;Get started page&lt;/a&gt;‚ÄØfor better understanding¬†how to use the design system&lt;/li&gt;
&lt;li&gt;an updated pattern on &lt;a href=&quot;https://gov-cy.github.io/govcy-design-system-docs/patterns/service_structure/&quot; target=&quot;_blank&quot;&gt;structuring a gov.cy service&lt;/a&gt;, featuring example variants that have been tested and proven effective&lt;/li&gt;
&lt;li&gt;a dedicated page to help developers¬†&lt;a href=&quot;https://gov-cy.github.io/govcy-design-system-docs/getting-started/developer-assets/&quot; target=&quot;_blank&quot;&gt;use the design system‚Äôs developer assets&lt;/a&gt; ‚ÄØto accelerate development&lt;/li&gt;
&lt;li&gt;an‚ÄØ&lt;a href=&quot;https://gov-cy.github.io/govcy-design-system-docs/getting-started/page-template/&quot; target=&quot;_blank&quot;&gt;updated page template&lt;/a&gt; with sample pages, for websites, as well as services&lt;/li&gt;
&lt;li&gt;better guidance for implementing &lt;a href=&quot;https://gov-cy.github.io/govcy-design-system-docs/components/&quot; target=&quot;_blank&quot;&gt;components&lt;/a&gt;‚ÄØwith sections, explaining:
&lt;ul&gt;
&lt;li&gt;when to use a component&lt;/li&gt;
&lt;li&gt;when not to use a component&lt;/li&gt;
&lt;li&gt;how the component works&lt;/li&gt;
&lt;li&gt;how to implement different variants of the component&lt;/li&gt;
&lt;li&gt;how to display errors&lt;/li&gt;
&lt;li&gt;what content to use&lt;/li&gt;
&lt;li&gt;accessibility best practices&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The design system also introduces the following new elements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Components
&lt;ul&gt;
&lt;li&gt;accordion&lt;/li&gt;
&lt;li&gt;character count&lt;/li&gt;
&lt;li&gt;cookie banner&lt;/li&gt;
&lt;li&gt;data tables&lt;/li&gt;
&lt;li&gt;date picker&lt;/li&gt;
&lt;li&gt;inset text&lt;/li&gt;
&lt;li&gt;phase banner&lt;/li&gt;
&lt;li&gt;summary list&lt;/li&gt;
&lt;li&gt;tag&lt;/li&gt;
&lt;li&gt;textarea&lt;/li&gt;
&lt;li&gt;warning text&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Styles
&lt;ul&gt;
&lt;li&gt;images&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Patterns
&lt;ul&gt;
&lt;li&gt;addresses&lt;/li&gt;
&lt;li&gt;bank details&lt;/li&gt;
&lt;li&gt;confirm an email address&lt;/li&gt;
&lt;li&gt;confirmation pages&lt;/li&gt;
&lt;li&gt;contact page&lt;/li&gt;
&lt;li&gt;cookies page&lt;/li&gt;
&lt;li&gt;filter results&lt;/li&gt;
&lt;li&gt;gender or sex&lt;/li&gt;
&lt;li&gt;numeric inputs&lt;/li&gt;
&lt;li&gt;social insurance number&lt;/li&gt;
&lt;li&gt;step by step navigation&lt;/li&gt;
&lt;li&gt;task list page&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Accessibility enhancements&lt;/h2&gt;
&lt;p&gt;The new version of the design system emphasises accessibility. All elements have been tested and comply with the ‚ÄØ&lt;a href=&quot;https://gov-cy.github.io/govcy-design-system-docs/getting-started/principles/#8.-include-everyone&quot; target=&quot;_blank&quot;&gt;include everyone principle&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The DSF has included recommendations and best practices on how to enhance accessibility using their components and patterns (for example‚ÄØsee the ‚ÄØ&lt;a href=&quot;https://gov-cy.github.io/govcy-design-system-docs/components/text_input/#accessibility&quot; target=&quot;_blank&quot;&gt;input text accessibility recommendations&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;However, that does not mean that any implementation that uses the developer assets, automatically complies with the Standard. When implementing a gov.cy service or website, make sure to always test for compliance with the EN 301 549 Standard.&lt;/p&gt;
&lt;h2&gt;Design system website&lt;/h2&gt;
&lt;p&gt;The ‚ÄØ&lt;a href=&quot;https://gov-cy.github.io/govcy-design-system-docs/&quot; target=&quot;_blank&quot;&gt;design system‚Äôs website&lt;/a&gt;‚ÄØhas been updated with the new styling and guidance.&lt;/p&gt;
&lt;p&gt;Anyone implementing a service or a website for gov.cy, should first go through the‚ÄØ&lt;a href=&quot;https://gov-cy.github.io/govcy-design-system-docs/getting-started/&quot; target=&quot;_blank&quot;&gt;Get started page&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Developer assets&lt;/h2&gt;
&lt;p&gt;The developer assets (CSS and JavaScript) have also been updated for the new version. Check out the‚ÄØ&lt;a href=&quot;https://gov-cy.github.io/govcy-design-system-docs/getting-started/developer-assets/&quot; target=&quot;_blank&quot;&gt;developer assets page&lt;/a&gt;‚ÄØfor information on how to use the prebuilt CSS and JavaScript.&lt;/p&gt;
&lt;p&gt;This is a major release and the changes on CSS and JavaScript are not backward compatible with version 2. For more information about the older version visit‚ÄØthe‚ÄØ&lt;a href=&quot;https://gov-cy.github.io/govcy-design-system-docs-v2/&quot; target=&quot;_blank&quot;&gt;v2 documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Related tools and libraries&lt;/h2&gt;
&lt;p&gt;In updating the design system, DSF also enhanced the libraries used for rapid design, development, prototyping and testing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://excalidraw-libraries-git-cevangelougovcy-gov-e2dec6-excalidraw.vercel.app/?theme=light&amp;amp;sort=default#cevangelougovcy-gov-cy-uds-library&quot; target=&quot;_blank&quot;&gt;excalidraw library&lt;/a&gt;¬†to create rapid wireframes and sketches.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.figma.com/community/file/1388468172430388495/dsf-gov-cy-unified-design-system-v-3&quot; target=&quot;_blank&quot;&gt;figma library&lt;/a&gt;¬†to rapidly create designs and prototypes the gov.cy way&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/@gov-cy/dsf-email-templates&quot; target=&quot;_blank&quot;&gt;dsf-email-templates&lt;/a&gt;¬†NPM package to create HTML email templates&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/@gov-cy/govcy-frontend-tester&quot; target=&quot;_blank&quot;&gt;govcy-frontend-tester&lt;/a&gt;¬†NPM package to perform front end tests in terms of the accessibility and generic guidelines of the design system&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://gov-cy.github.io/govcy-design-system-docs&quot; class=&quot;govcy-btn-primary&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://consevangelou.com/img/dsf-small-white-icon.svg&quot; alt=&quot;DSF&quot; class=&quot;btn-image&quot;&gt; Launch the gov.cy Design System&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Improving Accessibility: Lessons from making design elements screen reader-friendly (by DSF)</title>
    <link href="https://consevangelou.com/blog/dsf-improving-accessibility-lessons-from-making-design-elements-screen-reader-friendly/" />
    <updated>2024-01-23T00:00:00Z</updated>
    <id>https://consevangelou.com/blog/dsf-improving-accessibility-lessons-from-making-design-elements-screen-reader-friendly/</id>
    <content type="html">&lt;p&gt;Check out the link below for the post I wrote for the &lt;a href=&quot;https://dsf.dmrid.gov.cy/&quot; target=&quot;_blank&quot;&gt;Digital Services Factory (DSF)&lt;/a&gt;, on how the DSF tried to evolve the screen reader capabilities of their components, sharing the lessons learned from that process&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://dsf.dmrid.gov.cy/2024/01/23/improving-accessibility-lessons-from-making-design-elements-screen-reader-friendly/&quot; class=&quot;govcy-btn-primary&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://consevangelou.com/img/dsf-small-white-icon.svg&quot; alt=&quot;DSF&quot; class=&quot;btn-image&quot;&gt; Launch the post&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>How to use the Figma community library file to design digital services (by DSF)</title>
    <link href="https://consevangelou.com/blog/dsf-how-to-use-the-figma-community-library-file-to-design-digital-services/" />
    <updated>2023-08-24T00:00:00Z</updated>
    <id>https://consevangelou.com/blog/dsf-how-to-use-the-figma-community-library-file-to-design-digital-services/</id>
    <content type="html">&lt;p&gt;Check out the link below for the post I wrote for the &lt;a href=&quot;https://dsf.dmrid.gov.cy/&quot; target=&quot;_blank&quot;&gt;Digital Services Factory (DSF)&lt;/a&gt;, on how to use the &lt;a href=&quot;https://www.figma.com/community/file/1388468172430388495/dsf-gov-cy-unified-design-system-v-3&quot; target=&quot;_blank&quot;&gt;DSF Figma community library file&lt;/a&gt; to rapidly design and prototype digital services the gov.cy way.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://dsf.dmrid.gov.cy/2023/08/24/how-to-use-the-figma-community-library-file-to-design-digital-services/&quot; class=&quot;govcy-btn-primary&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://consevangelou.com/img/dsf-small-white-icon.svg&quot; alt=&quot;DSF&quot; class=&quot;btn-image&quot;&gt; Launch the post&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
</feed>